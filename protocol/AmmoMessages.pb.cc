// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AmmoMessages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ammo {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* DataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushAcknowledgement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushAcknowledgement_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticationMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticationMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticationResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AuthenticationResult_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PullRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageWrapper_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageWrapper_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AmmoMessages_2eproto() {
  protobuf_AddDesc_AmmoMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AmmoMessages.proto");
  GOOGLE_CHECK(file != NULL);
  DataMessage_descriptor_ = file->message_type(0);
  static const int DataMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, mime_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, data_),
  };
  DataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataMessage_descriptor_,
      DataMessage::default_instance_,
      DataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataMessage));
  PushAcknowledgement_descriptor_ = file->message_type(1);
  static const int PushAcknowledgement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAcknowledgement, uri_),
  };
  PushAcknowledgement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushAcknowledgement_descriptor_,
      PushAcknowledgement::default_instance_,
      PushAcknowledgement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAcknowledgement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAcknowledgement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushAcknowledgement));
  AuthenticationMessage_descriptor_ = file->message_type(2);
  static const int AuthenticationMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationMessage, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationMessage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationMessage, user_key_),
  };
  AuthenticationMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthenticationMessage_descriptor_,
      AuthenticationMessage::default_instance_,
      AuthenticationMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthenticationMessage));
  SubscribeMessage_descriptor_ = file->message_type(3);
  static const int SubscribeMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeMessage, mime_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeMessage, query_),
  };
  SubscribeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeMessage_descriptor_,
      SubscribeMessage::default_instance_,
      SubscribeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeMessage));
  AuthenticationResult_descriptor_ = file->message_type(4);
  static const int AuthenticationResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationResult, message_),
  };
  AuthenticationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthenticationResult_descriptor_,
      AuthenticationResult::default_instance_,
      AuthenticationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthenticationResult));
  AuthenticationResult_Status_descriptor_ = AuthenticationResult_descriptor_->enum_type(0);
  PullRequest_descriptor_ = file->message_type(5);
  static const int PullRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, request_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, plugin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, mime_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, projection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, max_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, start_from_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, live_query_),
  };
  PullRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PullRequest_descriptor_,
      PullRequest::default_instance_,
      PullRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PullRequest));
  PullResponse_descriptor_ = file->message_type(6);
  static const int PullResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullResponse, request_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullResponse, plugin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullResponse, mime_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullResponse, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullResponse, data_),
  };
  PullResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PullResponse_descriptor_,
      PullResponse::default_instance_,
      PullResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PullResponse));
  MessageWrapper_descriptor_ = file->message_type(7);
  static const int MessageWrapper_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, session_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, data_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, authentication_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, authentication_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, subscribe_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, push_acknowledgement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, pull_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, pull_response_),
  };
  MessageWrapper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageWrapper_descriptor_,
      MessageWrapper::default_instance_,
      MessageWrapper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageWrapper));
  MessageWrapper_MessageType_descriptor_ = MessageWrapper_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AmmoMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataMessage_descriptor_, &DataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushAcknowledgement_descriptor_, &PushAcknowledgement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthenticationMessage_descriptor_, &AuthenticationMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeMessage_descriptor_, &SubscribeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthenticationResult_descriptor_, &AuthenticationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PullRequest_descriptor_, &PullRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PullResponse_descriptor_, &PullResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageWrapper_descriptor_, &MessageWrapper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AmmoMessages_2eproto() {
  delete DataMessage::default_instance_;
  delete DataMessage_reflection_;
  delete PushAcknowledgement::default_instance_;
  delete PushAcknowledgement_reflection_;
  delete AuthenticationMessage::default_instance_;
  delete AuthenticationMessage_reflection_;
  delete SubscribeMessage::default_instance_;
  delete SubscribeMessage_reflection_;
  delete AuthenticationResult::default_instance_;
  delete AuthenticationResult_reflection_;
  delete PullRequest::default_instance_;
  delete PullRequest_reflection_;
  delete PullResponse::default_instance_;
  delete PullResponse_reflection_;
  delete MessageWrapper::default_instance_;
  delete MessageWrapper_reflection_;
}

void protobuf_AddDesc_AmmoMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022AmmoMessages.proto\022\rammo.protocol\";\n\013D"
    "ataMessage\022\013\n\003uri\030\001 \002(\t\022\021\n\tmime_type\030\003 \001"
    "(\t\022\014\n\004data\030\002 \001(\014\"\"\n\023PushAcknowledgement\022"
    "\013\n\003uri\030\001 \002(\t\"M\n\025AuthenticationMessage\022\021\n"
    "\tdevice_id\030\001 \002(\t\022\017\n\007user_id\030\002 \002(\t\022\020\n\010use"
    "r_key\030\003 \002(\t\"4\n\020SubscribeMessage\022\021\n\tmime_"
    "type\030\001 \002(\t\022\r\n\005query\030\002 \001(\t\"\206\001\n\024Authentica"
    "tionResult\022:\n\006result\030\001 \002(\0162*.ammo.protoc"
    "ol.AuthenticationResult.Status\022\017\n\007messag"
    "e\030\002 \001(\t\"!\n\006Status\022\n\n\006FAILED\020\000\022\013\n\007SUCCESS"
    "\020\001\"\273\001\n\013PullRequest\022\023\n\013request_uid\030\001 \002(\t\022"
    "\021\n\tplugin_id\030\002 \002(\t\022\021\n\tmime_type\030\003 \002(\t\022\r\n"
    "\005query\030\004 \002(\t\022\022\n\nprojection\030\005 \001(\t\022\026\n\013max_"
    "results\030\006 \001(\r:\0010\022\033\n\020start_from_count\030\007 \001"
    "(\r:\0010\022\031\n\nlive_query\030\010 \001(\010:\005false\"d\n\014Pull"
    "Response\022\023\n\013request_uid\030\001 \002(\t\022\021\n\tplugin_"
    "id\030\002 \002(\t\022\021\n\tmime_type\030\003 \002(\t\022\013\n\003uri\030\004 \002(\t"
    "\022\014\n\004data\030\005 \002(\014\"\256\005\n\016MessageWrapper\0227\n\004typ"
    "e\030\001 \002(\0162).ammo.protocol.MessageWrapper.M"
    "essageType\022\024\n\014session_uuid\030\002 \001(\t\0220\n\014data"
    "_message\030\003 \001(\0132\032.ammo.protocol.DataMessa"
    "ge\022D\n\026authentication_message\030\004 \001(\0132$.amm"
    "o.protocol.AuthenticationMessage\022B\n\025auth"
    "entication_result\030\005 \001(\0132#.ammo.protocol."
    "AuthenticationResult\022:\n\021subscribe_messag"
    "e\030\006 \001(\0132\037.ammo.protocol.SubscribeMessage"
    "\022@\n\024push_acknowledgement\030\007 \001(\0132\".ammo.pr"
    "otocol.PushAcknowledgement\0220\n\014pull_reque"
    "st\030\010 \001(\0132\032.ammo.protocol.PullRequest\0222\n\r"
    "pull_response\030\t \001(\0132\033.ammo.protocol.Pull"
    "Response\"\254\001\n\013MessageType\022\020\n\014DATA_MESSAGE"
    "\020\000\022\032\n\026AUTHENTICATION_MESSAGE\020\001\022\031\n\025AUTHEN"
    "TICATION_RESULT\020\002\022\025\n\021SUBSCRIBE_MESSAGE\020\004"
    "\022\030\n\024PUSH_ACKNOWLEDGEMENT\020\005\022\020\n\014PULL_REQUE"
    "ST\020\006\022\021\n\rPULL_RESPONSE\020\007B%\n#edu.vu.isis.a"
    "mmo.coreapplication.pb", 1422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AmmoMessages.proto", &protobuf_RegisterTypes);
  DataMessage::default_instance_ = new DataMessage();
  PushAcknowledgement::default_instance_ = new PushAcknowledgement();
  AuthenticationMessage::default_instance_ = new AuthenticationMessage();
  SubscribeMessage::default_instance_ = new SubscribeMessage();
  AuthenticationResult::default_instance_ = new AuthenticationResult();
  PullRequest::default_instance_ = new PullRequest();
  PullResponse::default_instance_ = new PullResponse();
  MessageWrapper::default_instance_ = new MessageWrapper();
  DataMessage::default_instance_->InitAsDefaultInstance();
  PushAcknowledgement::default_instance_->InitAsDefaultInstance();
  AuthenticationMessage::default_instance_->InitAsDefaultInstance();
  SubscribeMessage::default_instance_->InitAsDefaultInstance();
  AuthenticationResult::default_instance_->InitAsDefaultInstance();
  PullRequest::default_instance_->InitAsDefaultInstance();
  PullResponse::default_instance_->InitAsDefaultInstance();
  MessageWrapper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AmmoMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AmmoMessages_2eproto {
  StaticDescriptorInitializer_AmmoMessages_2eproto() {
    protobuf_AddDesc_AmmoMessages_2eproto();
  }
} static_descriptor_initializer_AmmoMessages_2eproto_;


// ===================================================================

const ::std::string DataMessage::_default_uri_;
const ::std::string DataMessage::_default_mime_type_;
const ::std::string DataMessage::_default_data_;
#ifndef _MSC_VER
const int DataMessage::kUriFieldNumber;
const int DataMessage::kMimeTypeFieldNumber;
const int DataMessage::kDataFieldNumber;
#endif  // !_MSC_VER

DataMessage::DataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataMessage::InitAsDefaultInstance() {
}

DataMessage::DataMessage(const DataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataMessage::SharedCtor() {
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&_default_uri_);
  mime_type_ = const_cast< ::std::string*>(&_default_mime_type_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMessage::~DataMessage() {
  SharedDtor();
}

void DataMessage::SharedDtor() {
  if (uri_ != &_default_uri_) {
    delete uri_;
  }
  if (mime_type_ != &_default_mime_type_) {
    delete mime_type_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMessage_descriptor_;
}

const DataMessage& DataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmmoMessages_2eproto();  return *default_instance_;
}

DataMessage* DataMessage::default_instance_ = NULL;

DataMessage* DataMessage::New() const {
  return new DataMessage;
}

void DataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (uri_ != &_default_uri_) {
        uri_->clear();
      }
    }
    if (_has_bit(1)) {
      if (mime_type_ != &_default_mime_type_) {
        mime_type_->clear();
      }
    }
    if (_has_bit(2)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mime_type;
        break;
      }
      
      // optional string mime_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mime_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uri = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uri(), output);
  }
  
  // optional bytes data = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  // optional string mime_type = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mime_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uri = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }
  
  // optional bytes data = 2;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  // optional string mime_type = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mime_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }
    
    // optional string mime_type = 3;
    if (has_mime_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mime_type());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataMessage::MergeFrom(const DataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uri(from.uri());
    }
    if (from._has_bit(1)) {
      set_mime_type(from.mime_type());
    }
    if (from._has_bit(2)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMessage::CopyFrom(const DataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DataMessage::Swap(DataMessage* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(mime_type_, other->mime_type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataMessage_descriptor_;
  metadata.reflection = DataMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PushAcknowledgement::_default_uri_;
#ifndef _MSC_VER
const int PushAcknowledgement::kUriFieldNumber;
#endif  // !_MSC_VER

PushAcknowledgement::PushAcknowledgement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushAcknowledgement::InitAsDefaultInstance() {
}

PushAcknowledgement::PushAcknowledgement(const PushAcknowledgement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushAcknowledgement::SharedCtor() {
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&_default_uri_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushAcknowledgement::~PushAcknowledgement() {
  SharedDtor();
}

void PushAcknowledgement::SharedDtor() {
  if (uri_ != &_default_uri_) {
    delete uri_;
  }
  if (this != default_instance_) {
  }
}

void PushAcknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushAcknowledgement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushAcknowledgement_descriptor_;
}

const PushAcknowledgement& PushAcknowledgement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmmoMessages_2eproto();  return *default_instance_;
}

PushAcknowledgement* PushAcknowledgement::default_instance_ = NULL;

PushAcknowledgement* PushAcknowledgement::New() const {
  return new PushAcknowledgement;
}

void PushAcknowledgement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (uri_ != &_default_uri_) {
        uri_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushAcknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushAcknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uri = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uri(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushAcknowledgement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uri = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushAcknowledgement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushAcknowledgement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushAcknowledgement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushAcknowledgement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushAcknowledgement::MergeFrom(const PushAcknowledgement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uri(from.uri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushAcknowledgement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushAcknowledgement::CopyFrom(const PushAcknowledgement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAcknowledgement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PushAcknowledgement::Swap(PushAcknowledgement* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushAcknowledgement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushAcknowledgement_descriptor_;
  metadata.reflection = PushAcknowledgement_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AuthenticationMessage::_default_device_id_;
const ::std::string AuthenticationMessage::_default_user_id_;
const ::std::string AuthenticationMessage::_default_user_key_;
#ifndef _MSC_VER
const int AuthenticationMessage::kDeviceIdFieldNumber;
const int AuthenticationMessage::kUserIdFieldNumber;
const int AuthenticationMessage::kUserKeyFieldNumber;
#endif  // !_MSC_VER

AuthenticationMessage::AuthenticationMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthenticationMessage::InitAsDefaultInstance() {
}

AuthenticationMessage::AuthenticationMessage(const AuthenticationMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthenticationMessage::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&_default_device_id_);
  user_id_ = const_cast< ::std::string*>(&_default_user_id_);
  user_key_ = const_cast< ::std::string*>(&_default_user_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticationMessage::~AuthenticationMessage() {
  SharedDtor();
}

void AuthenticationMessage::SharedDtor() {
  if (device_id_ != &_default_device_id_) {
    delete device_id_;
  }
  if (user_id_ != &_default_user_id_) {
    delete user_id_;
  }
  if (user_key_ != &_default_user_key_) {
    delete user_key_;
  }
  if (this != default_instance_) {
  }
}

void AuthenticationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticationMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticationMessage_descriptor_;
}

const AuthenticationMessage& AuthenticationMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmmoMessages_2eproto();  return *default_instance_;
}

AuthenticationMessage* AuthenticationMessage::default_instance_ = NULL;

AuthenticationMessage* AuthenticationMessage::New() const {
  return new AuthenticationMessage;
}

void AuthenticationMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (device_id_ != &_default_device_id_) {
        device_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (user_id_ != &_default_user_id_) {
        user_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (user_key_ != &_default_user_key_) {
        user_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthenticationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }
      
      // required string user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_key;
        break;
      }
      
      // required string user_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_key().data(), this->user_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthenticationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string device_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }
  
  // required string user_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_id(), output);
  }
  
  // required string user_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_key().data(), this->user_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthenticationMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string device_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }
  
  // required string user_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }
  
  // required string user_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_key().data(), this->user_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthenticationMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }
    
    // required string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // required string user_key = 3;
    if (has_user_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthenticationMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthenticationMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthenticationMessage::MergeFrom(const AuthenticationMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_device_id(from.device_id());
    }
    if (from._has_bit(1)) {
      set_user_id(from.user_id());
    }
    if (from._has_bit(2)) {
      set_user_key(from.user_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthenticationMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticationMessage::CopyFrom(const AuthenticationMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AuthenticationMessage::Swap(AuthenticationMessage* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_key_, other->user_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthenticationMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticationMessage_descriptor_;
  metadata.reflection = AuthenticationMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SubscribeMessage::_default_mime_type_;
const ::std::string SubscribeMessage::_default_query_;
#ifndef _MSC_VER
const int SubscribeMessage::kMimeTypeFieldNumber;
const int SubscribeMessage::kQueryFieldNumber;
#endif  // !_MSC_VER

SubscribeMessage::SubscribeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeMessage::InitAsDefaultInstance() {
}

SubscribeMessage::SubscribeMessage(const SubscribeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeMessage::SharedCtor() {
  _cached_size_ = 0;
  mime_type_ = const_cast< ::std::string*>(&_default_mime_type_);
  query_ = const_cast< ::std::string*>(&_default_query_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeMessage::~SubscribeMessage() {
  SharedDtor();
}

void SubscribeMessage::SharedDtor() {
  if (mime_type_ != &_default_mime_type_) {
    delete mime_type_;
  }
  if (query_ != &_default_query_) {
    delete query_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeMessage_descriptor_;
}

const SubscribeMessage& SubscribeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmmoMessages_2eproto();  return *default_instance_;
}

SubscribeMessage* SubscribeMessage::default_instance_ = NULL;

SubscribeMessage* SubscribeMessage::New() const {
  return new SubscribeMessage;
}

void SubscribeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (mime_type_ != &_default_mime_type_) {
        mime_type_->clear();
      }
    }
    if (_has_bit(1)) {
      if (query_ != &_default_query_) {
        query_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mime_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query;
        break;
      }
      
      // optional string query = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mime_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mime_type(), output);
  }
  
  // optional string query = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->query(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string mime_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mime_type(), target);
  }
  
  // optional string query = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mime_type = 1;
    if (has_mime_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mime_type());
    }
    
    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeMessage::MergeFrom(const SubscribeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mime_type(from.mime_type());
    }
    if (from._has_bit(1)) {
      set_query(from.query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessage::CopyFrom(const SubscribeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SubscribeMessage::Swap(SubscribeMessage* other) {
  if (other != this) {
    std::swap(mime_type_, other->mime_type_);
    std::swap(query_, other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeMessage_descriptor_;
  metadata.reflection = SubscribeMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AuthenticationResult_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticationResult_Status_descriptor_;
}
bool AuthenticationResult_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AuthenticationResult_Status AuthenticationResult::FAILED;
const AuthenticationResult_Status AuthenticationResult::SUCCESS;
const AuthenticationResult_Status AuthenticationResult::Status_MIN;
const AuthenticationResult_Status AuthenticationResult::Status_MAX;
const int AuthenticationResult::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string AuthenticationResult::_default_message_;
#ifndef _MSC_VER
const int AuthenticationResult::kResultFieldNumber;
const int AuthenticationResult::kMessageFieldNumber;
#endif  // !_MSC_VER

AuthenticationResult::AuthenticationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthenticationResult::InitAsDefaultInstance() {
}

AuthenticationResult::AuthenticationResult(const AuthenticationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthenticationResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticationResult::~AuthenticationResult() {
  SharedDtor();
}

void AuthenticationResult::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void AuthenticationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticationResult_descriptor_;
}

const AuthenticationResult& AuthenticationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmmoMessages_2eproto();  return *default_instance_;
}

AuthenticationResult* AuthenticationResult::default_instance_ = NULL;

AuthenticationResult* AuthenticationResult::New() const {
  return new AuthenticationResult;
}

void AuthenticationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthenticationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ammo.protocol.AuthenticationResult.Status result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ammo::protocol::AuthenticationResult_Status_IsValid(value)) {
            set_result(static_cast< ::ammo::protocol::AuthenticationResult_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthenticationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ammo.protocol.AuthenticationResult.Status result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthenticationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ammo.protocol.AuthenticationResult.Status result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthenticationResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ammo.protocol.AuthenticationResult.Status result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthenticationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthenticationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthenticationResult::MergeFrom(const AuthenticationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthenticationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticationResult::CopyFrom(const AuthenticationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AuthenticationResult::Swap(AuthenticationResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthenticationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticationResult_descriptor_;
  metadata.reflection = AuthenticationResult_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PullRequest::_default_request_uid_;
const ::std::string PullRequest::_default_plugin_id_;
const ::std::string PullRequest::_default_mime_type_;
const ::std::string PullRequest::_default_query_;
const ::std::string PullRequest::_default_projection_;
#ifndef _MSC_VER
const int PullRequest::kRequestUidFieldNumber;
const int PullRequest::kPluginIdFieldNumber;
const int PullRequest::kMimeTypeFieldNumber;
const int PullRequest::kQueryFieldNumber;
const int PullRequest::kProjectionFieldNumber;
const int PullRequest::kMaxResultsFieldNumber;
const int PullRequest::kStartFromCountFieldNumber;
const int PullRequest::kLiveQueryFieldNumber;
#endif  // !_MSC_VER

PullRequest::PullRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PullRequest::InitAsDefaultInstance() {
}

PullRequest::PullRequest(const PullRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PullRequest::SharedCtor() {
  _cached_size_ = 0;
  request_uid_ = const_cast< ::std::string*>(&_default_request_uid_);
  plugin_id_ = const_cast< ::std::string*>(&_default_plugin_id_);
  mime_type_ = const_cast< ::std::string*>(&_default_mime_type_);
  query_ = const_cast< ::std::string*>(&_default_query_);
  projection_ = const_cast< ::std::string*>(&_default_projection_);
  max_results_ = 0u;
  start_from_count_ = 0u;
  live_query_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullRequest::~PullRequest() {
  SharedDtor();
}

void PullRequest::SharedDtor() {
  if (request_uid_ != &_default_request_uid_) {
    delete request_uid_;
  }
  if (plugin_id_ != &_default_plugin_id_) {
    delete plugin_id_;
  }
  if (mime_type_ != &_default_mime_type_) {
    delete mime_type_;
  }
  if (query_ != &_default_query_) {
    delete query_;
  }
  if (projection_ != &_default_projection_) {
    delete projection_;
  }
  if (this != default_instance_) {
  }
}

void PullRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullRequest_descriptor_;
}

const PullRequest& PullRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmmoMessages_2eproto();  return *default_instance_;
}

PullRequest* PullRequest::default_instance_ = NULL;

PullRequest* PullRequest::New() const {
  return new PullRequest;
}

void PullRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (request_uid_ != &_default_request_uid_) {
        request_uid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (plugin_id_ != &_default_plugin_id_) {
        plugin_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (mime_type_ != &_default_mime_type_) {
        mime_type_->clear();
      }
    }
    if (_has_bit(3)) {
      if (query_ != &_default_query_) {
        query_->clear();
      }
    }
    if (_has_bit(4)) {
      if (projection_ != &_default_projection_) {
        projection_->clear();
      }
    }
    max_results_ = 0u;
    start_from_count_ = 0u;
    live_query_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PullRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_uid().data(), this->request_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plugin_id;
        break;
      }
      
      // required string plugin_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plugin_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plugin_id().data(), this->plugin_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mime_type;
        break;
      }
      
      // required string mime_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mime_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }
      
      // required string query = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_projection;
        break;
      }
      
      // optional string projection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->projection().data(), this->projection().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_results;
        break;
      }
      
      // optional uint32 max_results = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_start_from_count;
        break;
      }
      
      // optional uint32 start_from_count = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_from_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_from_count_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_live_query;
        break;
      }
      
      // optional bool live_query = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_live_query:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &live_query_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PullRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string request_uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_uid().data(), this->request_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_uid(), output);
  }
  
  // required string plugin_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plugin_id().data(), this->plugin_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->plugin_id(), output);
  }
  
  // required string mime_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mime_type(), output);
  }
  
  // required string query = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->query(), output);
  }
  
  // optional string projection = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projection().data(), this->projection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->projection(), output);
  }
  
  // optional uint32 max_results = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_results(), output);
  }
  
  // optional uint32 start_from_count = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->start_from_count(), output);
  }
  
  // optional bool live_query = 8 [default = false];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->live_query(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PullRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string request_uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_uid().data(), this->request_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_uid(), target);
  }
  
  // required string plugin_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plugin_id().data(), this->plugin_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plugin_id(), target);
  }
  
  // required string mime_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mime_type(), target);
  }
  
  // required string query = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->query(), target);
  }
  
  // optional string projection = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projection().data(), this->projection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->projection(), target);
  }
  
  // optional uint32 max_results = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_results(), target);
  }
  
  // optional uint32 start_from_count = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->start_from_count(), target);
  }
  
  // optional bool live_query = 8 [default = false];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->live_query(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PullRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string request_uid = 1;
    if (has_request_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_uid());
    }
    
    // required string plugin_id = 2;
    if (has_plugin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plugin_id());
    }
    
    // required string mime_type = 3;
    if (has_mime_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mime_type());
    }
    
    // required string query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }
    
    // optional string projection = 5;
    if (has_projection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projection());
    }
    
    // optional uint32 max_results = 6 [default = 0];
    if (has_max_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_results());
    }
    
    // optional uint32 start_from_count = 7 [default = 0];
    if (has_start_from_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_from_count());
    }
    
    // optional bool live_query = 8 [default = false];
    if (has_live_query()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PullRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PullRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PullRequest::MergeFrom(const PullRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_request_uid(from.request_uid());
    }
    if (from._has_bit(1)) {
      set_plugin_id(from.plugin_id());
    }
    if (from._has_bit(2)) {
      set_mime_type(from.mime_type());
    }
    if (from._has_bit(3)) {
      set_query(from.query());
    }
    if (from._has_bit(4)) {
      set_projection(from.projection());
    }
    if (from._has_bit(5)) {
      set_max_results(from.max_results());
    }
    if (from._has_bit(6)) {
      set_start_from_count(from.start_from_count());
    }
    if (from._has_bit(7)) {
      set_live_query(from.live_query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PullRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullRequest::CopyFrom(const PullRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PullRequest::Swap(PullRequest* other) {
  if (other != this) {
    std::swap(request_uid_, other->request_uid_);
    std::swap(plugin_id_, other->plugin_id_);
    std::swap(mime_type_, other->mime_type_);
    std::swap(query_, other->query_);
    std::swap(projection_, other->projection_);
    std::swap(max_results_, other->max_results_);
    std::swap(start_from_count_, other->start_from_count_);
    std::swap(live_query_, other->live_query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PullRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullRequest_descriptor_;
  metadata.reflection = PullRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PullResponse::_default_request_uid_;
const ::std::string PullResponse::_default_plugin_id_;
const ::std::string PullResponse::_default_mime_type_;
const ::std::string PullResponse::_default_uri_;
const ::std::string PullResponse::_default_data_;
#ifndef _MSC_VER
const int PullResponse::kRequestUidFieldNumber;
const int PullResponse::kPluginIdFieldNumber;
const int PullResponse::kMimeTypeFieldNumber;
const int PullResponse::kUriFieldNumber;
const int PullResponse::kDataFieldNumber;
#endif  // !_MSC_VER

PullResponse::PullResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PullResponse::InitAsDefaultInstance() {
}

PullResponse::PullResponse(const PullResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PullResponse::SharedCtor() {
  _cached_size_ = 0;
  request_uid_ = const_cast< ::std::string*>(&_default_request_uid_);
  plugin_id_ = const_cast< ::std::string*>(&_default_plugin_id_);
  mime_type_ = const_cast< ::std::string*>(&_default_mime_type_);
  uri_ = const_cast< ::std::string*>(&_default_uri_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullResponse::~PullResponse() {
  SharedDtor();
}

void PullResponse::SharedDtor() {
  if (request_uid_ != &_default_request_uid_) {
    delete request_uid_;
  }
  if (plugin_id_ != &_default_plugin_id_) {
    delete plugin_id_;
  }
  if (mime_type_ != &_default_mime_type_) {
    delete mime_type_;
  }
  if (uri_ != &_default_uri_) {
    delete uri_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PullResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullResponse_descriptor_;
}

const PullResponse& PullResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmmoMessages_2eproto();  return *default_instance_;
}

PullResponse* PullResponse::default_instance_ = NULL;

PullResponse* PullResponse::New() const {
  return new PullResponse;
}

void PullResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (request_uid_ != &_default_request_uid_) {
        request_uid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (plugin_id_ != &_default_plugin_id_) {
        plugin_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (mime_type_ != &_default_mime_type_) {
        mime_type_->clear();
      }
    }
    if (_has_bit(3)) {
      if (uri_ != &_default_uri_) {
        uri_->clear();
      }
    }
    if (_has_bit(4)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PullResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_uid().data(), this->request_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plugin_id;
        break;
      }
      
      // required string plugin_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plugin_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plugin_id().data(), this->plugin_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mime_type;
        break;
      }
      
      // required string mime_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mime_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uri;
        break;
      }
      
      // required string uri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // required bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PullResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string request_uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_uid().data(), this->request_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_uid(), output);
  }
  
  // required string plugin_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plugin_id().data(), this->plugin_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->plugin_id(), output);
  }
  
  // required string mime_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mime_type(), output);
  }
  
  // required string uri = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uri(), output);
  }
  
  // required bytes data = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PullResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string request_uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_uid().data(), this->request_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_uid(), target);
  }
  
  // required string plugin_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plugin_id().data(), this->plugin_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plugin_id(), target);
  }
  
  // required string mime_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mime_type(), target);
  }
  
  // required string uri = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }
  
  // required bytes data = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PullResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string request_uid = 1;
    if (has_request_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_uid());
    }
    
    // required string plugin_id = 2;
    if (has_plugin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plugin_id());
    }
    
    // required string mime_type = 3;
    if (has_mime_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mime_type());
    }
    
    // required string uri = 4;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }
    
    // required bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PullResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PullResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PullResponse::MergeFrom(const PullResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_request_uid(from.request_uid());
    }
    if (from._has_bit(1)) {
      set_plugin_id(from.plugin_id());
    }
    if (from._has_bit(2)) {
      set_mime_type(from.mime_type());
    }
    if (from._has_bit(3)) {
      set_uri(from.uri());
    }
    if (from._has_bit(4)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PullResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullResponse::CopyFrom(const PullResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void PullResponse::Swap(PullResponse* other) {
  if (other != this) {
    std::swap(request_uid_, other->request_uid_);
    std::swap(plugin_id_, other->plugin_id_);
    std::swap(mime_type_, other->mime_type_);
    std::swap(uri_, other->uri_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PullResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullResponse_descriptor_;
  metadata.reflection = PullResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageWrapper_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageWrapper_MessageType_descriptor_;
}
bool MessageWrapper_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageWrapper_MessageType MessageWrapper::DATA_MESSAGE;
const MessageWrapper_MessageType MessageWrapper::AUTHENTICATION_MESSAGE;
const MessageWrapper_MessageType MessageWrapper::AUTHENTICATION_RESULT;
const MessageWrapper_MessageType MessageWrapper::SUBSCRIBE_MESSAGE;
const MessageWrapper_MessageType MessageWrapper::PUSH_ACKNOWLEDGEMENT;
const MessageWrapper_MessageType MessageWrapper::PULL_REQUEST;
const MessageWrapper_MessageType MessageWrapper::PULL_RESPONSE;
const MessageWrapper_MessageType MessageWrapper::MessageType_MIN;
const MessageWrapper_MessageType MessageWrapper::MessageType_MAX;
const int MessageWrapper::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string MessageWrapper::_default_session_uuid_;
#ifndef _MSC_VER
const int MessageWrapper::kTypeFieldNumber;
const int MessageWrapper::kSessionUuidFieldNumber;
const int MessageWrapper::kDataMessageFieldNumber;
const int MessageWrapper::kAuthenticationMessageFieldNumber;
const int MessageWrapper::kAuthenticationResultFieldNumber;
const int MessageWrapper::kSubscribeMessageFieldNumber;
const int MessageWrapper::kPushAcknowledgementFieldNumber;
const int MessageWrapper::kPullRequestFieldNumber;
const int MessageWrapper::kPullResponseFieldNumber;
#endif  // !_MSC_VER

MessageWrapper::MessageWrapper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageWrapper::InitAsDefaultInstance() {
  data_message_ = const_cast< ::ammo::protocol::DataMessage*>(&::ammo::protocol::DataMessage::default_instance());
  authentication_message_ = const_cast< ::ammo::protocol::AuthenticationMessage*>(&::ammo::protocol::AuthenticationMessage::default_instance());
  authentication_result_ = const_cast< ::ammo::protocol::AuthenticationResult*>(&::ammo::protocol::AuthenticationResult::default_instance());
  subscribe_message_ = const_cast< ::ammo::protocol::SubscribeMessage*>(&::ammo::protocol::SubscribeMessage::default_instance());
  push_acknowledgement_ = const_cast< ::ammo::protocol::PushAcknowledgement*>(&::ammo::protocol::PushAcknowledgement::default_instance());
  pull_request_ = const_cast< ::ammo::protocol::PullRequest*>(&::ammo::protocol::PullRequest::default_instance());
  pull_response_ = const_cast< ::ammo::protocol::PullResponse*>(&::ammo::protocol::PullResponse::default_instance());
}

MessageWrapper::MessageWrapper(const MessageWrapper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageWrapper::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  session_uuid_ = const_cast< ::std::string*>(&_default_session_uuid_);
  data_message_ = NULL;
  authentication_message_ = NULL;
  authentication_result_ = NULL;
  subscribe_message_ = NULL;
  push_acknowledgement_ = NULL;
  pull_request_ = NULL;
  pull_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageWrapper::~MessageWrapper() {
  SharedDtor();
}

void MessageWrapper::SharedDtor() {
  if (session_uuid_ != &_default_session_uuid_) {
    delete session_uuid_;
  }
  if (this != default_instance_) {
    delete data_message_;
    delete authentication_message_;
    delete authentication_result_;
    delete subscribe_message_;
    delete push_acknowledgement_;
    delete pull_request_;
    delete pull_response_;
  }
}

void MessageWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageWrapper_descriptor_;
}

const MessageWrapper& MessageWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmmoMessages_2eproto();  return *default_instance_;
}

MessageWrapper* MessageWrapper::default_instance_ = NULL;

MessageWrapper* MessageWrapper::New() const {
  return new MessageWrapper;
}

void MessageWrapper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (_has_bit(1)) {
      if (session_uuid_ != &_default_session_uuid_) {
        session_uuid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (data_message_ != NULL) data_message_->::ammo::protocol::DataMessage::Clear();
    }
    if (_has_bit(3)) {
      if (authentication_message_ != NULL) authentication_message_->::ammo::protocol::AuthenticationMessage::Clear();
    }
    if (_has_bit(4)) {
      if (authentication_result_ != NULL) authentication_result_->::ammo::protocol::AuthenticationResult::Clear();
    }
    if (_has_bit(5)) {
      if (subscribe_message_ != NULL) subscribe_message_->::ammo::protocol::SubscribeMessage::Clear();
    }
    if (_has_bit(6)) {
      if (push_acknowledgement_ != NULL) push_acknowledgement_->::ammo::protocol::PushAcknowledgement::Clear();
    }
    if (_has_bit(7)) {
      if (pull_request_ != NULL) pull_request_->::ammo::protocol::PullRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (pull_response_ != NULL) pull_response_->::ammo::protocol::PullResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ammo.protocol.MessageWrapper.MessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ammo::protocol::MessageWrapper_MessageType_IsValid(value)) {
            set_type(static_cast< ::ammo::protocol::MessageWrapper_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_uuid;
        break;
      }
      
      // optional string session_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_uuid().data(), this->session_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_message;
        break;
      }
      
      // optional .ammo.protocol.DataMessage data_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_authentication_message;
        break;
      }
      
      // optional .ammo.protocol.AuthenticationMessage authentication_message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authentication_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authentication_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_authentication_result;
        break;
      }
      
      // optional .ammo.protocol.AuthenticationResult authentication_result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authentication_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authentication_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_subscribe_message;
        break;
      }
      
      // optional .ammo.protocol.SubscribeMessage subscribe_message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribe_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_push_acknowledgement;
        break;
      }
      
      // optional .ammo.protocol.PushAcknowledgement push_acknowledgement = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push_acknowledgement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_acknowledgement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pull_request;
        break;
      }
      
      // optional .ammo.protocol.PullRequest pull_request = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pull_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pull_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pull_response;
        break;
      }
      
      // optional .ammo.protocol.PullResponse pull_response = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pull_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pull_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ammo.protocol.MessageWrapper.MessageType type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string session_uuid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_uuid().data(), this->session_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_uuid(), output);
  }
  
  // optional .ammo.protocol.DataMessage data_message = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data_message(), output);
  }
  
  // optional .ammo.protocol.AuthenticationMessage authentication_message = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->authentication_message(), output);
  }
  
  // optional .ammo.protocol.AuthenticationResult authentication_result = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->authentication_result(), output);
  }
  
  // optional .ammo.protocol.SubscribeMessage subscribe_message = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subscribe_message(), output);
  }
  
  // optional .ammo.protocol.PushAcknowledgement push_acknowledgement = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->push_acknowledgement(), output);
  }
  
  // optional .ammo.protocol.PullRequest pull_request = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pull_request(), output);
  }
  
  // optional .ammo.protocol.PullResponse pull_response = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pull_response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageWrapper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ammo.protocol.MessageWrapper.MessageType type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string session_uuid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_uuid().data(), this->session_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_uuid(), target);
  }
  
  // optional .ammo.protocol.DataMessage data_message = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data_message(), target);
  }
  
  // optional .ammo.protocol.AuthenticationMessage authentication_message = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->authentication_message(), target);
  }
  
  // optional .ammo.protocol.AuthenticationResult authentication_result = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->authentication_result(), target);
  }
  
  // optional .ammo.protocol.SubscribeMessage subscribe_message = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subscribe_message(), target);
  }
  
  // optional .ammo.protocol.PushAcknowledgement push_acknowledgement = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->push_acknowledgement(), target);
  }
  
  // optional .ammo.protocol.PullRequest pull_request = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pull_request(), target);
  }
  
  // optional .ammo.protocol.PullResponse pull_response = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pull_response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageWrapper::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ammo.protocol.MessageWrapper.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string session_uuid = 2;
    if (has_session_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_uuid());
    }
    
    // optional .ammo.protocol.DataMessage data_message = 3;
    if (has_data_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_message());
    }
    
    // optional .ammo.protocol.AuthenticationMessage authentication_message = 4;
    if (has_authentication_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authentication_message());
    }
    
    // optional .ammo.protocol.AuthenticationResult authentication_result = 5;
    if (has_authentication_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authentication_result());
    }
    
    // optional .ammo.protocol.SubscribeMessage subscribe_message = 6;
    if (has_subscribe_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe_message());
    }
    
    // optional .ammo.protocol.PushAcknowledgement push_acknowledgement = 7;
    if (has_push_acknowledgement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_acknowledgement());
    }
    
    // optional .ammo.protocol.PullRequest pull_request = 8;
    if (has_pull_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pull_request());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ammo.protocol.PullResponse pull_response = 9;
    if (has_pull_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pull_response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageWrapper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageWrapper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageWrapper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageWrapper::MergeFrom(const MessageWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_session_uuid(from.session_uuid());
    }
    if (from._has_bit(2)) {
      mutable_data_message()->::ammo::protocol::DataMessage::MergeFrom(from.data_message());
    }
    if (from._has_bit(3)) {
      mutable_authentication_message()->::ammo::protocol::AuthenticationMessage::MergeFrom(from.authentication_message());
    }
    if (from._has_bit(4)) {
      mutable_authentication_result()->::ammo::protocol::AuthenticationResult::MergeFrom(from.authentication_result());
    }
    if (from._has_bit(5)) {
      mutable_subscribe_message()->::ammo::protocol::SubscribeMessage::MergeFrom(from.subscribe_message());
    }
    if (from._has_bit(6)) {
      mutable_push_acknowledgement()->::ammo::protocol::PushAcknowledgement::MergeFrom(from.push_acknowledgement());
    }
    if (from._has_bit(7)) {
      mutable_pull_request()->::ammo::protocol::PullRequest::MergeFrom(from.pull_request());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_pull_response()->::ammo::protocol::PullResponse::MergeFrom(from.pull_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageWrapper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageWrapper::CopyFrom(const MessageWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_data_message()) {
    if (!this->data_message().IsInitialized()) return false;
  }
  if (has_authentication_message()) {
    if (!this->authentication_message().IsInitialized()) return false;
  }
  if (has_authentication_result()) {
    if (!this->authentication_result().IsInitialized()) return false;
  }
  if (has_subscribe_message()) {
    if (!this->subscribe_message().IsInitialized()) return false;
  }
  if (has_push_acknowledgement()) {
    if (!this->push_acknowledgement().IsInitialized()) return false;
  }
  if (has_pull_request()) {
    if (!this->pull_request().IsInitialized()) return false;
  }
  if (has_pull_response()) {
    if (!this->pull_response().IsInitialized()) return false;
  }
  return true;
}

void MessageWrapper::Swap(MessageWrapper* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(session_uuid_, other->session_uuid_);
    std::swap(data_message_, other->data_message_);
    std::swap(authentication_message_, other->authentication_message_);
    std::swap(authentication_result_, other->authentication_result_);
    std::swap(subscribe_message_, other->subscribe_message_);
    std::swap(push_acknowledgement_, other->push_acknowledgement_);
    std::swap(pull_request_, other->pull_request_);
    std::swap(pull_response_, other->pull_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageWrapper_descriptor_;
  metadata.reflection = MessageWrapper_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace ammo

// @@protoc_insertion_point(global_scope)
