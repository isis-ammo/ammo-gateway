/* soapPASSPortBindingProxy.cpp
   Generated by gSOAP 2.7.17 from ../pass.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapPASSPortBindingProxy.h"

PASSPortBindingProxy::PASSPortBindingProxy()
{	PASSPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PASSPortBindingProxy::PASSPortBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

PASSPortBindingProxy::PASSPortBindingProxy(soap_mode iomode)
{	PASSPortBindingProxy_init(iomode, iomode);
}

PASSPortBindingProxy::PASSPortBindingProxy(soap_mode imode, soap_mode omode)
{	PASSPortBindingProxy_init(imode, omode);
}

void PASSPortBindingProxy::PASSPortBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"xlink", "http://www.w3.org/1999/xlink", NULL, NULL},
	{"ns1", "http://peoc3t.us.army.mil/PASS/ports/PASSPortBinding", NULL, NULL},
	{"pass", "http://peoc3t.us.army.mil/PASS", NULL, NULL},
	{"ns2", "http://peoc3t.us.army.mil/PASS/ports/PASSSubscriberPortBinding", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
}

PASSPortBindingProxy::~PASSPortBindingProxy()
{ }

void PASSPortBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void PASSPortBindingProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *PASSPortBindingProxy::soap_fault()
{	return this->fault;
}

const char *PASSPortBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *PASSPortBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int PASSPortBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void PASSPortBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void PASSPortBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *PASSPortBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int PASSPortBindingProxy::subscribe(_pass__subscribe *pass__subscribe, pass__status *pass__status_)
{	struct soap *soap = this;
	struct __ns1__subscribe soap_tmp___ns1__subscribe;
	const char *soap_action = NULL;
	soap->encodingStyle = NULL;
	soap_tmp___ns1__subscribe.pass__subscribe = pass__subscribe;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__subscribe(soap, &soap_tmp___ns1__subscribe);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__subscribe(soap, &soap_tmp___ns1__subscribe, "-ns1:subscribe", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__subscribe(soap, &soap_tmp___ns1__subscribe, "-ns1:subscribe", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!pass__status_)
		return soap_closesock(soap);
	pass__status_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	pass__status_->soap_get(soap, "pass:status", "pass:status");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PASSPortBindingProxy::retract_USCOREitem(_pass__retract_USCOREitem *pass__retract_USCOREitem, pass__status *pass__status_)
{	struct soap *soap = this;
	struct __ns1__retract_USCOREitem soap_tmp___ns1__retract_USCOREitem;
	const char *soap_action = NULL;
	soap->encodingStyle = NULL;
	soap_tmp___ns1__retract_USCOREitem.pass__retract_USCOREitem = pass__retract_USCOREitem;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__retract_USCOREitem(soap, &soap_tmp___ns1__retract_USCOREitem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__retract_USCOREitem(soap, &soap_tmp___ns1__retract_USCOREitem, "-ns1:retract_item", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__retract_USCOREitem(soap, &soap_tmp___ns1__retract_USCOREitem, "-ns1:retract_item", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!pass__status_)
		return soap_closesock(soap);
	pass__status_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	pass__status_->soap_get(soap, "pass:status", "pass:status");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PASSPortBindingProxy::retract_USCOREtopic(_pass__retract_USCOREtopic *pass__retract_USCOREtopic, pass__status *pass__status_)
{	struct soap *soap = this;
	struct __ns1__retract_USCOREtopic soap_tmp___ns1__retract_USCOREtopic;
	const char *soap_action = NULL;
	soap->encodingStyle = NULL;
	soap_tmp___ns1__retract_USCOREtopic.pass__retract_USCOREtopic = pass__retract_USCOREtopic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__retract_USCOREtopic(soap, &soap_tmp___ns1__retract_USCOREtopic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__retract_USCOREtopic(soap, &soap_tmp___ns1__retract_USCOREtopic, "-ns1:retract_topic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__retract_USCOREtopic(soap, &soap_tmp___ns1__retract_USCOREtopic, "-ns1:retract_topic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!pass__status_)
		return soap_closesock(soap);
	pass__status_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	pass__status_->soap_get(soap, "pass:status", "pass:status");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PASSPortBindingProxy::unsubscribe(_pass__unsubscribe *pass__unsubscribe, pass__status *pass__status_)
{	struct soap *soap = this;
	struct __ns1__unsubscribe soap_tmp___ns1__unsubscribe;
	const char *soap_action = NULL;
	soap->encodingStyle = NULL;
	soap_tmp___ns1__unsubscribe.pass__unsubscribe = pass__unsubscribe;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__unsubscribe(soap, &soap_tmp___ns1__unsubscribe);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__unsubscribe(soap, &soap_tmp___ns1__unsubscribe, "-ns1:unsubscribe", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__unsubscribe(soap, &soap_tmp___ns1__unsubscribe, "-ns1:unsubscribe", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!pass__status_)
		return soap_closesock(soap);
	pass__status_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	pass__status_->soap_get(soap, "pass:status", "pass:status");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PASSPortBindingProxy::publish(_pass__publish *pass__publish, pass__status *pass__status_)
{	struct soap *soap = this;
	struct __ns1__publish soap_tmp___ns1__publish;
	const char *soap_action = NULL;
	soap->encodingStyle = NULL;
	soap_tmp___ns1__publish.pass__publish = pass__publish;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__publish(soap, &soap_tmp___ns1__publish);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__publish(soap, &soap_tmp___ns1__publish, "-ns1:publish", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__publish(soap, &soap_tmp___ns1__publish, "-ns1:publish", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!pass__status_)
		return soap_closesock(soap);
	pass__status_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	pass__status_->soap_get(soap, "pass:status", "pass:status");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PASSPortBindingProxy::create_USCOREtopic(_pass__create_USCOREtopic *pass__create_USCOREtopic, pass__status *pass__status_)
{	struct soap *soap = this;
	struct __ns1__create_USCOREtopic soap_tmp___ns1__create_USCOREtopic;
	const char *soap_action = NULL;
	soap->encodingStyle = NULL;
	soap_tmp___ns1__create_USCOREtopic.pass__create_USCOREtopic = pass__create_USCOREtopic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__create_USCOREtopic(soap, &soap_tmp___ns1__create_USCOREtopic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__create_USCOREtopic(soap, &soap_tmp___ns1__create_USCOREtopic, "-ns1:create_topic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__create_USCOREtopic(soap, &soap_tmp___ns1__create_USCOREtopic, "-ns1:create_topic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!pass__status_)
		return soap_closesock(soap);
	pass__status_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	pass__status_->soap_get(soap, "pass:status", "pass:status");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PASSPortBindingProxy::sync(_pass__sync *pass__sync, _pass__sync_USCOREresponse *pass__sync_USCOREresponse)
{	struct soap *soap = this;
	struct __ns1__sync soap_tmp___ns1__sync;
	const char *soap_action = NULL;
	soap->encodingStyle = NULL;
	soap_tmp___ns1__sync.pass__sync = pass__sync;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__sync(soap, &soap_tmp___ns1__sync);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__sync(soap, &soap_tmp___ns1__sync, "-ns1:sync", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__sync(soap, &soap_tmp___ns1__sync, "-ns1:sync", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!pass__sync_USCOREresponse)
		return soap_closesock(soap);
	pass__sync_USCOREresponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	pass__sync_USCOREresponse->soap_get(soap, "pass:sync_response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
