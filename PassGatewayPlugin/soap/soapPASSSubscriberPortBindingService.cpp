/* soapPASSSubscriberPortBindingService.cpp
   Generated by gSOAP 2.7.17 from ../pass.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapPASSSubscriberPortBindingService.h"

#include "PassAmmmoPublisher.h"
#include "PassConfigurationManager.h"
#include "log.h"

PASSSubscriberPortBindingService::PASSSubscriberPortBindingService()
{	PASSSubscriberPortBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PASSSubscriberPortBindingService::PASSSubscriberPortBindingService(const struct soap &_soap) :soap(_soap)
{ }

PASSSubscriberPortBindingService::PASSSubscriberPortBindingService(soap_mode iomode)
{	PASSSubscriberPortBindingService_init(iomode, iomode);
}

PASSSubscriberPortBindingService::PASSSubscriberPortBindingService(soap_mode imode, soap_mode omode)
{	PASSSubscriberPortBindingService_init(imode, omode);
}

PASSSubscriberPortBindingService::~PASSSubscriberPortBindingService()
{ }

void PASSSubscriberPortBindingService::PASSSubscriberPortBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"xlink", "http://www.w3.org/1999/xlink", NULL, NULL},
	{"ns1", "http://peoc3t.us.army.mil/PASS/ports/PASSPortBinding", NULL, NULL},
	{"pass", "http://peoc3t.us.army.mil/PASS", NULL, NULL},
	{"ns2", "http://peoc3t.us.army.mil/PASS/ports/PASSSubscriberPortBinding", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
};

void PASSSubscriberPortBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

PASSSubscriberPortBindingService *PASSSubscriberPortBindingService::copy()
{	PASSSubscriberPortBindingService *dup = SOAP_NEW_COPY(PASSSubscriberPortBindingService(*(struct soap*)this));
	return dup;
}

int PASSSubscriberPortBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int PASSSubscriberPortBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int PASSSubscriberPortBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int PASSSubscriberPortBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int PASSSubscriberPortBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void PASSSubscriberPortBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void PASSSubscriberPortBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *PASSSubscriberPortBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void PASSSubscriberPortBindingService::soap_noheader()
{	header = NULL;
}

int PASSSubscriberPortBindingService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET PASSSubscriberPortBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET PASSSubscriberPortBindingService::accept()
{	return soap_accept(this);
}

int PASSSubscriberPortBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{	soap_begin(this);
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			this->error = SOAP_EOF;
			return soap_send_fault(this);
		}
#endif

		soap_begin(this);

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_recv(this))
		{	if (this->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(this);
#else 
				return soap_send_fault(this);
#endif
			}
			soap_closesock(this);

			continue;
		}

		if (soap_envelope_begin_in(this)
		 || soap_recv_header(this)
		 || soap_body_begin_in(this)
		 || dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns2__publish(PASSSubscriberPortBindingService*);
static int serve___ns2__retract_USCOREitem(PASSSubscriberPortBindingService*);
static int serve___ns2__retract_USCOREtopic(PASSSubscriberPortBindingService*);
static int serve___ns2__unsubscribe(PASSSubscriberPortBindingService*);

int PASSSubscriberPortBindingService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "pass:publish"))
		return serve___ns2__publish(this);
	if (!soap_match_tag(this, this->tag, "pass:retract_item"))
		return serve___ns2__retract_USCOREitem(this);
	if (!soap_match_tag(this, this->tag, "pass:retract_topic"))
		return serve___ns2__retract_USCOREtopic(this);
	if (!soap_match_tag(this, this->tag, "pass:unsubscribe"))
		return serve___ns2__unsubscribe(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___ns2__publish(PASSSubscriberPortBindingService *soap)
{	struct __ns2__publish soap_tmp___ns2__publish;
	pass__status pass__status_;
	pass__status_.soap_default(soap);
	soap_default___ns2__publish(soap, &soap_tmp___ns2__publish);
	soap->encodingStyle = NULL;
	if (!soap_get___ns2__publish(soap, &soap_tmp___ns2__publish, "-ns2:publish", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->publish(soap_tmp___ns2__publish.pass__publish, &pass__status_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	pass__status_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || pass__status_.soap_put(soap, "pass:status", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || pass__status_.soap_put(soap, "pass:status", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns2__retract_USCOREitem(PASSSubscriberPortBindingService *soap)
{	struct __ns2__retract_USCOREitem soap_tmp___ns2__retract_USCOREitem;
	pass__status pass__status_;
	pass__status_.soap_default(soap);
	soap_default___ns2__retract_USCOREitem(soap, &soap_tmp___ns2__retract_USCOREitem);
	soap->encodingStyle = NULL;
	if (!soap_get___ns2__retract_USCOREitem(soap, &soap_tmp___ns2__retract_USCOREitem, "-ns2:retract_item", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->retract_USCOREitem(soap_tmp___ns2__retract_USCOREitem.pass__retract_USCOREitem, &pass__status_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	pass__status_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || pass__status_.soap_put(soap, "pass:status", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || pass__status_.soap_put(soap, "pass:status", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns2__retract_USCOREtopic(PASSSubscriberPortBindingService *soap)
{	struct __ns2__retract_USCOREtopic soap_tmp___ns2__retract_USCOREtopic;
	pass__status pass__status_;
	pass__status_.soap_default(soap);
	soap_default___ns2__retract_USCOREtopic(soap, &soap_tmp___ns2__retract_USCOREtopic);
	soap->encodingStyle = NULL;
	if (!soap_get___ns2__retract_USCOREtopic(soap, &soap_tmp___ns2__retract_USCOREtopic, "-ns2:retract_topic", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->retract_USCOREtopic(soap_tmp___ns2__retract_USCOREtopic.pass__retract_USCOREtopic, &pass__status_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	pass__status_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || pass__status_.soap_put(soap, "pass:status", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || pass__status_.soap_put(soap, "pass:status", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns2__unsubscribe(PASSSubscriberPortBindingService *soap)
{	struct __ns2__unsubscribe soap_tmp___ns2__unsubscribe;
	pass__status pass__status_;
	pass__status_.soap_default(soap);
	soap_default___ns2__unsubscribe(soap, &soap_tmp___ns2__unsubscribe);
	soap->encodingStyle = NULL;
	if (!soap_get___ns2__unsubscribe(soap, &soap_tmp___ns2__unsubscribe, "-ns2:unsubscribe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->unsubscribe(soap_tmp___ns2__unsubscribe.pass__unsubscribe, &pass__status_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	pass__status_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || pass__status_.soap_put(soap, "pass:status", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || pass__status_.soap_put(soap, "pass:status", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */

/// Web service operation 'publish' (returns error code or SOAP_OK)
int
PASSSubscriberPortBindingService::publish (_pass__publish *pass__publish,
                                           pass__status *pass__status_)
{
  LOG_TRACE ("Recevied publish");
  
  if (pass__publish  != 0)
    {
      LOG_DEBUG ("Topic: " << pass__publish->topic);
      
      if (pass__publish->subscription_USCOREid)
        {
          LOG_DEBUG ("Subscription ID: " << *(pass__publish->subscription_USCOREid));
        }
      
      LOG_DEBUG ("Publisher ID: " << pass__publish->publisher_USCOREid);
      
      std::string lid ("0");
      std::string userid ("0");
      std::string unitid ("0");
      std::string name ("0");
      std::string lat ("0.0");
      std::string lon ("0.0");
      std::string created ("0");
      std::string modified ("0");
      
      // Iterate through collection of items.
      for (std::vector<pass__item *>::iterator it =
             pass__publish->item.begin ();
           it != pass__publish->item.end ();
           it++)
        {
          if (*it != 0)
            {
              pass__item *item = *it;
              std::string item_id (item->item_USCOREid);
              LOG_DEBUG ("--Item " << item_id << "--");
              
              std::string plugin_prefix (
                PassConfigurationManager::getInstance ()->getPassPluginId ());
                
              // Don't re-publish messages that originated locally.
              if (item_id.substr (0, plugin_prefix.size ()) == plugin_prefix)
                {
                  LOG_DEBUG ("Skipping locally published message " << item_id);
                  continue;
                }
              
	            /* <item_data   ...> */
              for (soap_dom_element::iterator it =
                     item->item_USCOREdata->__any.begin ();
                   it != item->item_USCOREdata->__any.end ();
                   ++it)
                {
		              if (std::string ((*it).name) == "PositionReport")
		                {
		                  LOG_DEBUG ("--PositionReport " );
		                  /* <PositionReport ...> */
		                  for (soap_dom_element::iterator pit =
			                       (*it).elts->begin(); 
			                     pit != (*it).elts->end();
			                     ++pit)
			                  {
			                    if (std::string ((*pit).name) == "Unit") 
			                      {
			                        LOG_DEBUG ("--Unit " );
			                        /* <Unit ...> */
			                        for (soap_dom_element::iterator uit =
				                             (*pit).elts->begin(); 
				                           uit != (*pit).elts->end();
				                           ++uit)
				                        {
				                          if (std::string ((*uit).name) == "ID")
				                            {
				                              if ((*uit).data != 0)
					                              {
					                                LOG_DEBUG ((*uit).name << ": " << (*uit).data);
					                                userid = (*uit).data;
					                              }
				                              else if ((*uit).wide != 0)
					                              {
					                                LOG_DEBUG ((*uit).name << " has wide data");
					                              }
				                            }
				                          else if (std::string ((*uit).name) == "Name")
				                            {
				                              if ((*uit).data != 0)
					                              {
					                                LOG_DEBUG ((*uit).name << ": " << (*uit).data);
					                                name = (*uit).data;
					                              }
				                              else if ((*uit).wide != 0)
					                              {
					                                LOG_DEBUG ((*uit).name << " has wide data");
					                              }
				                            }
				                        } // Unit iterator
			                      } // string == "Unit"
			                    else if (std::string ((*pit).name) == "Latitude") 
			                      {
			                        LOG_DEBUG ("--Latitude " );
			                        if ((*pit).data != 0)
				                        {
				                          LOG_DEBUG ((*pit).name << ": " << (*pit).data);
				                          lat = (*pit).data;
				                        }
			                        else if ((*pit).wide != 0)
				                        {
				                          LOG_DEBUG ((*pit).name << " has wide data");
				                        }
		                        }
		                      else if (std::string ((*pit).name) == "Longitude")
		                        {
		                          LOG_DEBUG ("--Longitude " );
		                          if ((*pit).data != 0)
				                        {
				                          LOG_DEBUG ((*pit).name << ": " << (*pit).data);
				                          lon = (*pit).data;
				                        }
			                        else if ((*pit).wide != 0)
				                        {
				                          LOG_DEBUG ((*pit).name << " has wide data");
				                        }
			                      }
			                    else if (std::string ((*pit).name) == "ReportDate")
			                      {
			                        LOG_DEBUG ("--ReportDate " );
			                        if ((*pit).data != 0)
				                        {
				                          LOG_DEBUG ((*pit).name << ": " << (*pit).data);
				                          created = (*pit).data;
				                        }
			                        else if ((*pit).wide != 0)
				                        {
				                          LOG_DEBUG ((*pit).name << " has wide data");
				                        }
		                        }
		                    } // PositionReport iterator
		                } // string == "PositionReport"
                } // item_data iterator
              
              if (name != "" && name != "0")
                {
                  // Push to gateway.
                  PassAmmmoPublisher::pushPli (lid,
                                               userid,
                                               unitid,
                                               name,
                                               lat,
                                               lon,
                                               created,
                                               modified);
                }
            } // item_data != 0
        } // item vector iterator
    } // pass_publish != 0
    
  return SOAP_OK;
}

/// Web service operation 'retract_item' (returns error code or SOAP_OK)
int
PASSSubscriberPortBindingService::retract_USCOREitem (
  _pass__retract_USCOREitem *pass__retract_USCOREitem,
  pass__status *pass__status_)
{
  LOG_TRACE ("Received retract_item");
  return SOAP_OK;
}

/// Web service operation 'retract_topic' (returns error code or SOAP_OK)
int
PASSSubscriberPortBindingService::retract_USCOREtopic (
  _pass__retract_USCOREtopic *pass__retract_USCOREtopic,
  pass__status *pass__status_)
{
  LOG_TRACE ("Received retract_topic");
  return SOAP_OK;
}

/// Web service operation 'unsubscribe' (returns error code or SOAP_OK)
int
PASSSubscriberPortBindingService::unsubscribe (
  _pass__unsubscribe *pass__unsubscribe,
  pass__status *pass__status_)
{
  LOG_TRACE ("Received unsubscribe");
  return SOAP_OK;
}
