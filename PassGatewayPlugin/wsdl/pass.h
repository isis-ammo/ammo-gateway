/* pass.h
   Generated by wsdl2h 1.2.17 from pass.wsdl passsubscriber.wsdl and typemap.dat
   2010-11-04 15:44:37 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on pass.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// dom.h declares the DOM xsd__anyType object (compiler and link with dom.cpp)
#import "dom.h"

// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

pass = "http://peoc3t.us.army.mil/PASS"
xlink = "http://www.w3.org/1999/xlink"

*/

/// @brief The XML Schema for the Publish and Subscribe Service (PASS).
#define SOAP_NAMESPACE_OF_pass	"http://peoc3t.us.army.mil/PASS"
//gsoap pass  schema namespace:	http://peoc3t.us.army.mil/PASS
//gsoap pass  schema elementForm:	qualified
//gsoap pass  schema attributeForm:	unqualified

/// @brief This schema provides the XLink attributes for general use.
#define SOAP_NAMESPACE_OF_xlink	"http://www.w3.org/1999/xlink"
//gsoap xlink schema namespace:	http://www.w3.org/1999/xlink
//gsoap xlink schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:anyURI"
typedef std::string xsd__anyURI;

/// Primitive built-in type "xs:decimal"
typedef std::string xsd__decimal;

/// Primitive built-in type "xs:integer"
typedef std::string xsd__integer;

/// Primitive built-in type "xs:nonNegativeInteger"
typedef std::string xsd__nonNegativeInteger;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class pass__status.
class pass__status;

//  Forward declaration of class pass__pass_USCOREfault.
class pass__pass_USCOREfault;

//  Forward declaration of class pass__item.
class pass__item;

//  Forward declaration of class pass__item_USCOREdata.
class pass__item_USCOREdata;

//  Forward declaration of class _pass__AOI_USCORErectangle.
class _pass__AOI_USCORErectangle;

//  Forward declaration of class _pass__References.
class _pass__References;

//  Forward declaration of class _pass__publish.
class _pass__publish;

//  Forward declaration of class _pass__retract_USCOREitem.
class _pass__retract_USCOREitem;

//  Forward declaration of class _pass__retract_USCOREtopic.
class _pass__retract_USCOREtopic;

//  Forward declaration of class _pass__unsubscribe.
class _pass__unsubscribe;

//  Forward declaration of class _pass__subscribe.
class _pass__subscribe;

//  Forward declaration of class _pass__sync.
class _pass__sync;

//  Forward declaration of class _pass__sync_USCOREresponse.
class _pass__sync_USCOREresponse;

//  Forward declaration of class _pass__create_USCOREtopic.
class _pass__create_USCOREtopic;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://peoc3t.us.army.mil/PASS                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/1999/xlink                                             *
 *                                                                            *
\******************************************************************************/


/// "http://peoc3t.us.army.mil/PASS":latitude is a simpleType restriction of xs:decimal.
/// Value range is [-90..90]
typedef xsd__decimal pass__latitude;

/// "http://peoc3t.us.army.mil/PASS":longitude is a simpleType restriction of xs:decimal.
/// Value range is [-180..180]
typedef xsd__decimal pass__longitude;

/// "http://peoc3t.us.army.mil/PASS":item_TTL is a simpleType restriction of xs:integer.
/// Value range is [-1..]
typedef xsd__integer pass__item_USCORETTL;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/1999/xlink                                             *
 *                                                                            *
\******************************************************************************/

/// @brief The 'show' attribute is used to communicate the desired presentation of the ending resource on traversal from the starting resource; it's value should be treated as follows: new - load ending resource in a new window, frame, pane, or other presentation context replace - load the resource in the same window, frame, pane, or other presentation context embed - load ending resource in place of the presentation of the starting resource other - behavior is unconstrained; examine other markup in the link for hints none - behavior is unconstrained

/// "http://www.w3.org/1999/xlink":show is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with '_xlink__show' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum _xlink__show
{
	_xlink__show__new_,	///< xs:string value="new"
	_xlink__show__replace,	///< xs:string value="replace"
	_xlink__show__embed,	///< xs:string value="embed"
	_xlink__show__other,	///< xs:string value="other"
	_xlink__show__none,	///< xs:string value="none"
};
/// @brief The 'actuate' attribute is used to communicate the desired timing of traversal from the starting resource to the ending resource; it's value should be treated as follows: onLoad - traverse to the ending resource immediately on loading the starting resource onRequest - traverse from the starting resource to the ending resource only on a post-loading event triggered for this purpose other - behavior is unconstrained; examine other markup in link for hints none - behavior is unconstrained

/// "http://www.w3.org/1999/xlink":actuate is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with '_xlink__actuate' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum _xlink__actuate
{
	_xlink__actuate__onLoad,	///< xs:string value="onLoad"
	_xlink__actuate__onRequest,	///< xs:string value="onRequest"
	_xlink__actuate__other,	///< xs:string value="other"
	_xlink__actuate__none,	///< xs:string value="none"
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://peoc3t.us.army.mil/PASS                                           *
 *                                                                            *
\******************************************************************************/


/// "http://peoc3t.us.army.mil/PASS":status is a complexType.
/// @brief Used to indicate the status of a PASS request.
class pass__status
{ public:
/// @brief Echo the command.
@    enum _pass__status_command
    {
	_pass__status_command__create_USCOREtopic,	///< xs:string value="create_topic"
	_pass__status_command__sync,	///< xs:string value="sync"
	_pass__status_command__publish,	///< xs:string value="publish"
	_pass__status_command__subscribe,	///< xs:string value="subscribe"
	_pass__status_command__unsubscribe,	///< xs:string value="unsubscribe"
	_pass__status_command__retract_USCOREtopic,	///< xs:string value="retract_topic"
	_pass__status_command__retract_USCOREitem,	///< xs:string value="retract_item"
	_pass__status_command__unknown,	///< xs:string value="unknown"
    }
                                         command                        1;	///< Required attribute.
/// @brief Echo the topic.
/// Attribute topic of type xs:string.
   @std::string                          topic                          1;	///< Required attribute.
/// @brief Echo the item_id.
/// Attribute item_id of type xs:string.
   @std::string*                         item_USCOREid                  0;	///< Optional attribute.
/// @brief Echo the subscription_id.
/// Attribute subscription_id of type xs:string.
   @std::string*                         subscription_USCOREid          0;	///< Optional attribute.
/// @brief A human readable string describing the status_code.
/// Attribute status_phrase of type xs:string.
   @std::string*                         status_USCOREphrase            0;	///< Optional attribute.
@    enum _pass__status_status_USCOREcode
    {
/// @brief Success.
	_pass__status_status_USCOREcode__1000 = 1000,	///< xs:int value="1000"
/// @brief Bad Request
	_pass__status_status_USCOREcode__1100 = 1100,	///< xs:int value="1100"
/// @brief Invalid Request
	_pass__status_status_USCOREcode__1101 = 1101,	///< xs:int value="1101"
/// @brief Topic Already Exists
	_pass__status_status_USCOREcode__1102 = 1102,	///< xs:int value="1102"
/// @brief Topic Does Not Exist
	_pass__status_status_USCOREcode__1103 = 1103,	///< xs:int value="1103"
/// @brief Item Does Not Exist
	_pass__status_status_USCOREcode__1104 = 1104,	///< xs:int value="1104"
/// @brief Subscription Does No Exist
	_pass__status_status_USCOREcode__1105 = 1105,	///< xs:int value="1105"
/// @brief Invalid AOI
	_pass__status_status_USCOREcode__1106 = 1106,	///< xs:int value="1106"
/// @brief Invalid Return Addres
	_pass__status_status_USCOREcode__1107 = 1107,	///< xs:int value="1107"
/// @brief Invalid DTTM
	_pass__status_status_USCOREcode__1108 = 1108,	///< xs:int value="1108"
/// @brief Message Too Large
	_pass__status_status_USCOREcode__1109 = 1109,	///< xs:int value="1109"
/// @brief Unauthorized
	_pass__status_status_USCOREcode__1110 = 1110,	///< xs:int value="1110"
/// @brief Command Not Allowed
	_pass__status_status_USCOREcode__1111 = 1111,	///< xs:int value="1111"
/// @brief Internal Server Error
	_pass__status_status_USCOREcode__1200 = 1200,	///< xs:int value="1200"
/// @brief Not Implemented
	_pass__status_status_USCOREcode__1201 = 1201,	///< xs:int value="1201"
/// @brief Service Unavailable
	_pass__status_status_USCOREcode__1202 = 1202,	///< xs:int value="1202"
    }
                                         status_USCOREcode              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://peoc3t.us.army.mil/PASS":pass_fault is a complexType.
/// @brief Used to indicate the faulure of a PASS request.
class pass__pass_USCOREfault
{ public:
/// @brief Failure code and phrase.
/// Element status of type "http://peoc3t.us.army.mil/PASS":status.
    pass__status*                        status                         1;	///< Required element.
/// @brief A human readable string giving details of the error.
/// Element error_details of type xs:string.
    std::string*                         error_USCOREdetails            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://peoc3t.us.army.mil/PASS":item is a complexType.
/// @brief An item published to the PASS.
class pass__item
{ public:
/// @brief The area of influence of the item. If unspecified, the AOI considered to be empty (no area).
/// Element reference "http://peoc3t.us.army.mil/PASS":AOI_rectangle.
    _pass__AOI_USCORErectangle*          AOI_USCORErectangle            0;	///< Optional element.
/// @brief A description of the item.
/// Element description of type xs:string.
    std::string*                         description                    0;	///< Optional element.
/// Element reference "http://peoc3t.us.army.mil/PASS":item_data.
    pass__item_USCOREdata*               item_USCOREdata                1;	///< Required element.
/// @brief The publisher defined item date.
/// Attribute item_dtg of type xs:dateTime.
   @time_t                               item_USCOREdtg                 1;	///< Required attribute.
/// @brief The duration (in seconds) that this item should be held in the PASS persistent store. If unspecified, the item will not be persisted. If set to -1, the item will be held until it is explicitly retracted.
/// Attribute item_TTL_secs of type "http://peoc3t.us.army.mil/PASS":item_TTL.
   @pass__item_USCORETTL                 item_USCORETTL_USCOREsecs      0;	///< Default value="0".
/// @brief The unique id of this item. If an item exists in the cache, it will be overwritten if this item's item_dtg is later than that of the existing item.
/// Attribute item_id of type xs:string.
   @std::string                          item_USCOREid                  1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://peoc3t.us.army.mil/PASS":item_data is a complexType.
/// @brief User defined item data.
class pass__item_USCOREdata
{ public:
/// Element reference "http://peoc3t.us.army.mil/PASS":References.
    _pass__References*                   References                     0;	///< Optional element.
/// TODO: <any namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    xsd__anyType                         __any                         0;	///< Catch any element content in DOM.
@    enum _pass__item_USCOREdata_item_USCOREdata_USCOREclassification
    {
	_pass__item_USCOREdata_item_USCOREdata_USCOREclassification__SECRET,	///< xs:string value="SECRET"
	_pass__item_USCOREdata_item_USCOREdata_USCOREclassification__CONFIDENTIAL,	///< xs:string value="CONFIDENTIAL"
	_pass__item_USCOREdata_item_USCOREdata_USCOREclassification__UNCLASSIFIED,	///< xs:string value="UNCLASSIFIED"
    }
                                         item_USCOREdata_USCOREclassification 1;	///< Required attribute.
/// Attribute control_mark of type xs:string.
   @std::string*                         control_USCOREmark             0;	///< Optional attribute.
/// Attribute release_mark of type xs:string.
   @std::string*                         release_USCOREmark             0;	///< Optional attribute.
/// Attribute declass_exemption_code of type xs:string.
   @std::string*                         declass_USCOREexemption_USCOREcode 0;	///< Optional attribute.
/// Attribute declass_dateTime of type xs:dateTime.
   @time_t*                              declass_USCOREdateTime         0;	///< Optional attribute.
@/// Length of this string is within 0..256 characters
    std::string                                                        
                                        *item_USCOREdata_USCOREcategory 0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @xsd__anyAttribute                    __anyAttribute                ;	///< Store anyAttribute content in DOM soap_dom_attribute linked node structure.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":AOI_rectangle

/// "http://peoc3t.us.army.mil/PASS":AOI_rectangle is a complexType.
class _pass__AOI_USCORErectangle
{ public:
/// @brief The north latitude of the bounding rectangle.
/// Attribute aoi_n_lat of type "http://peoc3t.us.army.mil/PASS":latitude.
   @pass__latitude                       aoi_USCOREn_USCORElat          1;	///< Required attribute.
/// @brief The west longitude of the bounding rectangle.
/// Attribute aoi_w_long of type "http://peoc3t.us.army.mil/PASS":longitude.
   @pass__longitude                      aoi_USCOREw_USCORElong         1;	///< Required attribute.
/// @brief The south latitude of the bounding rectangle.
/// Attribute aoi_s_lat of type "http://peoc3t.us.army.mil/PASS":latitude.
   @pass__latitude                       aoi_USCOREs_USCORElat          1;	///< Required attribute.
/// @brief The east longitude of the bounding rectangle.
/// Attribute aoi_e_long of type "http://peoc3t.us.army.mil/PASS":longitude.
   @pass__longitude                      aoi_USCOREe_USCORElong         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":References

/// "http://peoc3t.us.army.mil/PASS":References is a complexType.
/// @brief A set of hypelinks that reference information available via the web.
class _pass__References
{ public:
/// @brief General purpose mixed mode element with xlink attributes.
/// Size of ReferenceObj array is 1..unbounded
   $int                                  __sizeReferenceObj             1;
    class _pass__References_ReferenceObj
    {
/// Attribute type of type xs:string.
   @std::string*                         xlink__type                    0;	///< Fixed optional value="simple".
/// Attribute reference "http://www.w3.org/1999/xlink":href.
   @xsd__anyURI*                         xlink__href                    0;	///< Optional attribute.
/// Attribute reference "http://www.w3.org/1999/xlink":role.
   @xsd__anyURI*                         xlink__role                    0;	///< Optional attribute.
/// Attribute reference "http://www.w3.org/1999/xlink":arcrole.
   @xsd__anyURI*                         xlink__arcrole                 0;	///< Optional attribute.
/// Attribute reference "http://www.w3.org/1999/xlink":title.
   @std::string*                         xlink__title                   0;	///< Optional attribute.
/// Attribute reference "http://www.w3.org/1999/xlink":show.
/// @brief The 'show' attribute is used to communicate the desired presentation of the ending resource on traversal from the starting resource; it's value should be treated as follows: new - load ending resource in a new window, frame, pane, or other presentation context replace - load the resource in the same window, frame, pane, or other presentation context embed - load ending resource in place of the presentation of the starting resource other - behavior is unconstrained; examine other markup in the link for hints none - behavior is unconstrained
   @enum _xlink__show*                   xlink__show                    0;	///< Optional attribute.
/// Attribute reference "http://www.w3.org/1999/xlink":actuate.
/// @brief The 'actuate' attribute is used to communicate the desired timing of traversal from the starting resource to the ending resource; it's value should be treated as follows: onLoad - traverse to the ending resource immediately on loading the starting resource onRequest - traverse from the starting resource to the ending resource only on a post-loading event triggered for this purpose other - behavior is unconstrained; examine other markup in link for hints none - behavior is unconstrained
   @enum _xlink__actuate*                xlink__actuate                 0;	///< Optional attribute.
/// TODO: this mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    xsd__anyType                         __mixed                       0;	///< Catch mixed content in DOM soap_dom_element linked node structure.
    }                                   *ReferenceObj                   1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":publish
/// @brief Publish data to the PASS. This message type is also used to deliver published data to subscribers.

/// "http://peoc3t.us.army.mil/PASS":publish is a complexType.
class _pass__publish
{ public:
/// @brief A published item.
/// Vector of pass__item* element refs with length 1..unbounded
    std::vector<pass__item*            > item                           1;
/// @brief The topic on which to publish the item(s).
/// Attribute topic of type xs:string.
   @std::string                          topic                          1;	///< Required attribute.
/// @brief Used to specify to the subsciber the id of the subscription which caused this data to be delivered to it. This attribute is only valid for messages delivered from the PASS to the subscriber.
/// Attribute subscription_id of type xs:string.
   @std::string*                         subscription_USCOREid          0;	///< Optional attribute.
/// @brief The id of the element publishing the data. For a publish message within a sync response, this id should identify the PASS itself.
/// Attribute publisher_id of type xs:string.
   @std::string                          publisher_USCOREid             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":retract_item
/// @brief Retract an item from the topic cache. This message type is also used to notify subscribers that the item has been removed.

/// "http://peoc3t.us.army.mil/PASS":retract_item is a complexType.
class _pass__retract_USCOREitem
{ public:
/// @brief The id of the entity retracting this item.
/// Attribute publisher_id of type xs:string.
   @std::string                          publisher_USCOREid             1;	///< Required attribute.
/// @brief The id of the item to retract.
/// Attribute item_id of type xs:string.
   @std::string                          item_USCOREid                  1;	///< Required attribute.
/// @brief The topic from which to retract the item.
/// Attribute topic of type xs:string.
   @std::string                          topic                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":retract_topic
/// @brief Retract a topic from the PASS. All items in the cache will be removed. This message type is also used to notify subscribers that the topic has been removed.

/// "http://peoc3t.us.army.mil/PASS":retract_topic is a complexType.
class _pass__retract_USCOREtopic
{ public:
/// @brief The id of the entity retracting this topic. This id must match the id of the entity which created this topic.
/// Attribute owner_id of type xs:string.
   @std::string                          owner_USCOREid                 1;	///< Required attribute.
/// @brief The topic wich to retract.
/// Attribute topic of type xs:string.
   @std::string                          topic                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":unsubscribe
/// @brief Remove a subscription or all owned subscriptions from the PASS. This message type is also used to notify subscribers that a subscription has expired.

/// "http://peoc3t.us.army.mil/PASS":unsubscribe is a complexType.
class _pass__unsubscribe
{ public:
/// @brief The id of the entity removing the subscription(s).
/// Attribute subscriber_id of type xs:string.
   @std::string                          subscriber_USCOREid            1;	///< Required attribute.
/// @brief The subscription to remove. If unspecified, remove all subscriptions owned by the specified subscriber_id.
/// Attribute subscription_id of type xs:string.
   @std::string*                         subscription_USCOREid          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":subscribe
/// @brief Create a PASS subscription.

/// "http://peoc3t.us.army.mil/PASS":subscribe is a complexType.
class _pass__subscribe
{ public:
/// @brief The web service endpoint of the subscriber.
/// Element return_address of type xs:anyURI.
    xsd__anyURI                          return_USCOREaddress           1;	///< Required element.
/// @brief The area of interest of the subscriber. If the intersection of this AOI and the published item's AOI is not empty, the item will be delivered to this subscriber. If unspecified, the AOI of the subscriber is assumed to be global (whole earth).
/// Element reference "http://peoc3t.us.army.mil/PASS":AOI_rectangle.
    _pass__AOI_USCORErectangle*          AOI_USCORErectangle            0;	///< Optional element.
/// @brief Specific item to subscribe.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > item_USCOREid                  0;
/// @brief The duration (in seconds) of the subscription. If this subscription is not removed by the subscriber before this time (using unsubscribe) or the the topic owner (via retract_topic), the subscription will be removed by the PASS at this time and the subscriber will be notified via an unsubscribe message. If this value is not specified, the subscription will not expire.
/// Attribute duration_secs of type xs:nonNegativeInteger.
   @xsd__nonNegativeInteger*             duration_USCOREsecs            0;	///< Optional attribute.
/// @brief The id of the subscription being refreshed. This attribute is not currently used and should be omitted, since the PASS ICD does not currently describe the refresh of a subscription.
/// Attribute subscription_id of type xs:string.
   @std::string*                         subscription_USCOREid          0;	///< Optional attribute.
/// @brief The topic being subscribed to. This topic must either be a static topic or must have been previously created by create_topic.
/// Attribute topic of type xs:string.
   @std::string                          topic                          1;	///< Required attribute.
/// @brief The id of the entity subscribing.
/// Attribute subscriber_id of type xs:string.
   @std::string                          subscriber_USCOREid            1;	///< Required attribute.
/// @brief If set to true, the PASS should compress the body of the HTTP message delivered to this subscriber.
/// Attribute compression of type xs:boolean.
   @bool                                 compression                    0 = false;	///< Default value="false".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":sync
/// @brief Retrieve items from the topic cache. This command can also be used to retrieve the current existing topics or subscriptions.

/// "http://peoc3t.us.army.mil/PASS":sync is a complexType.
class _pass__sync
{ public:
/// @brief The area of interest of the requester. If the intersection of this AOI and the published item's AOI is not empty, the item will be retrieved. If unspecified, the AOI of the requester is assumed to be global (whole earth).
/// Element reference "http://peoc3t.us.army.mil/PASS":AOI_rectangle.
    _pass__AOI_USCORErectangle*          AOI_USCORErectangle            0;	///< Optional element.
/// @brief Specific item(s) to sync.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > item_USCOREid                  0;
/// @brief The PASS will not return cached items stored beore this date. If this attribute is not specified, storage time will not be used as an item selection criterion.
/// Attribute since_dtg of type xs:dateTime.
   @time_t*                              since_USCOREdtg                0;	///< Optional attribute.
/// @brief The topic from which to retrieved data items. If the topic specified here is the special name 'topics' this command will retrieve a list of the topics in the PASS. If the topic specified here is the special name 'subscriptions' this command will retrieve a list of the subscriptions in the PASS.
/// Attribute topic of type xs:string.
   @std::string                          topic                          1;	///< Required attribute.
/// @brief The id of the entity making the sync request.
/// Attribute requester_id of type xs:string.
   @std::string                          requester_USCOREid             1;	///< Required attribute.
/// @brief If set to true, the PASS should compress the body of the HTTP response to this request.
/// Attribute compression of type xs:boolean.
   @bool                                 compression                    0 = false;	///< Default value="false".
/// @brief An xpath expression that specifies the desired itemdata to be returned.
/// Attribute xpath_filter of type xs:string.
   @std::string*                         xpath_USCOREfilter             0;	///< Optional attribute.
/// @brief If true, the itemdata will be filtered out from the response.
/// Attribute item_id_only of type xs:boolean.
   @bool                                 item_USCOREid_USCOREonly       0 = false;	///< Default value="false".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":sync_response
/// @brief A response to a sync command.

/// "http://peoc3t.us.army.mil/PASS":sync_response is a complexType.
class _pass__sync_USCOREresponse
{ public:
/// @brief Status information.
/// @brief Used to indicate the status of a PASS request.
/// Element reference "http://peoc3t.us.army.mil/PASS":status.
    pass__status*                        status                         1;	///< Required element.
/// CHOICE OF ELEMENTS <xs:choice>
   $int                                  __union_sync_USCOREresponse   ;	///< Union _pass__union_sync_USCOREresponse selector: set to SOAP_UNION__pass__union_sync_USCOREresponse_<fieldname>
    union _pass__union_sync_USCOREresponse
    {
/// @brief A publish command containing a series of items matching the specified sync query (since_dtg and AOI_rectangle).
/// @brief Publish data to the PASS. This message type is also used to deliver published data to subscribers.
/// Element reference "http://peoc3t.us.army.mil/PASS":publish.

// Warning: undefined QName 'publish' for type 'pass__publish' (FIXME: check WSDL and schema definitions)

// Warning: undefined QName 'publish' for type 'pass__publish' (FIXME: check WSDL and schema definitions)
    _pass__publish*                      publish                        0;	///< Optional element.
/// @brief If the sync command specified the topic 'topics', a create_topic command per topic.
/// @brief Create a new PASS topic. This message type is also used in sync_response to enumerate the existing topics.
/// Vector of _pass__create_USCOREtopic* element refs with length 0..unbounded
    std::vector<_pass__create_USCOREtopic*> *create_USCOREtopic             0;
/// @brief If the sync command specified the topic 'subscriptions', a subscribe command per subscription.
/// @brief Create a PASS subscription.
/// Vector of _pass__subscribe* element refs with length 0..unbounded
    std::vector<_pass__subscribe*     > *subscribe                      0;
    }                                    union_sync_USCOREresponse     ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://peoc3t.us.army.mil/PASS":create_topic
/// @brief Create a new PASS topic. This message type is also used in sync_response to enumerate the existing topics.

/// "http://peoc3t.us.army.mil/PASS":create_topic is a complexType.
class _pass__create_USCOREtopic
{ public:
/// @brief A human readable description of the topic.
/// Element description of type xs:string.
    std::string*                         description                    0;	///< Optional element.
/// @brief An attribute indicating whether (open) or not (locked) an entity other than the publisher may publish to this topic.
@    enum _pass__create_USCOREtopic_publish_USCOREmode
    {
/// @brief Only the owner may publish to this topic.
	_pass__create_USCOREtopic_publish_USCOREmode__locked,	///< xs:string value="locked"
/// @brief Any entity may publish to this topic.
	_pass__create_USCOREtopic_publish_USCOREmode__open,	///< xs:string value="open"
    }
                                         publish_USCOREmode             0 = _pass__create_USCOREtopic_publish_USCOREmode__locked;	///< Default value="locked".
/// @brief Indicates whether or not this topic is retractable. If set the false, only the PASS administrator may remove this topic.
/// Attribute retractable of type xs:boolean.
   @bool                                 retractable                    0 = true;	///< Default value="true".
/// @brief The name of the topic.
/// Attribute topic of type xs:string.
   @std::string                          topic                          1;	///< Required attribute.
/// @brief The id of the entity creating this topic.
/// Attribute owner_id of type xs:string.
   @std::string                          owner_USCOREid                 1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.w3.org/1999/xlink                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://peoc3t.us.army.mil/PASS                                           *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://peoc3t.us.army.mil/PASS":status of type "http://peoc3t.us.army.mil/PASS":status.
/// @brief Used to indicate the status of a PASS request.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://peoc3t.us.army.mil/PASS":pass_fault of type "http://peoc3t.us.army.mil/PASS":pass_fault.
/// @brief Used to indicate the faulure of a PASS request.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://peoc3t.us.army.mil/PASS":item of type "http://peoc3t.us.army.mil/PASS":item.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://peoc3t.us.army.mil/PASS":item_data of type "http://peoc3t.us.army.mil/PASS":item_data.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://peoc3t.us.army.mil/PASS                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.w3.org/1999/xlink                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.w3.org/1999/xlink                                             *
 *                                                                            *
\******************************************************************************/


/// Top-level attribute "http://www.w3.org/1999/xlink":href of simpleType xs:anyURI.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://www.w3.org/1999/xlink":role of simpleType xs:anyURI.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://www.w3.org/1999/xlink":arcrole of simpleType xs:anyURI.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://www.w3.org/1999/xlink":title of simpleType xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://www.w3.org/1999/xlink":label of simpleType xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://www.w3.org/1999/xlink":from of simpleType xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://www.w3.org/1999/xlink":to of simpleType xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	PASSPortBinding 
//gsoap ns1  service type:	PASSPortType 
//gsoap ns1  service namespace:	http://peoc3t.us.army.mil/PASS/ports/PASSPortBinding 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns2  service name:	PASSSubscriberPortBinding 
//gsoap ns2  service type:	PASSSubscriberPortType 
//gsoap ns2  service namespace:	http://peoc3t.us.army.mil/PASS/ports/PASSSubscriberPortBinding 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref PASSPortBinding

  - @ref PASSSubscriberPortBinding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page PASSPortBinding Binding "PASSPortBinding"

@section PASSPortBinding_operations Operations of Binding  "PASSPortBinding"

  - @ref __ns1__subscribe

  - @ref __ns1__retract_USCOREitem

  - @ref __ns1__retract_USCOREtopic

  - @ref __ns1__unsubscribe

  - @ref __ns1__publish

  - @ref __ns1__create_USCOREtopic

  - @ref __ns1__sync

@section PASSPortBinding_ports Endpoints of Binding  "PASSPortBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page PASSSubscriberPortBinding Binding "PASSSubscriberPortBinding"

@section PASSSubscriberPortBinding_operations Operations of Binding  "PASSSubscriberPortBinding"

  - @ref __ns2__publish

  - @ref __ns2__retract_USCOREitem

  - @ref __ns2__retract_USCOREtopic

  - @ref __ns2__unsubscribe

@section PASSSubscriberPortBinding_ports Endpoints of Binding  "PASSSubscriberPortBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
   @xsd__anyAttribute                    __anyAttribute                ;	///< Catch any attribute content in DOM.
    pass__pass_USCOREfault*              pass__pass_USCOREfault_       ;
///< SOAP Fault element ""http://peoc3t.us.army.mil/PASS":pass_fault" part "result"
///< SOAP Fault element ""http://peoc3t.us.army.mil/PASS":pass_fault" part "result"
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
    _XML                                 __any                         ;	///< Catch any element content in XML string.
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PASSPortBinding                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__subscribe                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__subscribe" of service binding "PASSPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__subscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__subscribe*                   pass__subscribe,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__subscribe(
    struct soap *soap,
    // request parameters:
    _pass__subscribe*                   pass__subscribe,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSPortBindingProxy.h):
@code
  class PASSPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSPortBindingService.h):
@code
  class PASSPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	subscribe document
//gsoap ns1  service method-encoding:	subscribe literal
//gsoap ns1  service method-fault:	subscribe pass__pass_USCOREfault_
int __ns1__subscribe(
    _pass__subscribe*                   pass__subscribe,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__retract_USCOREitem                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__retract_USCOREitem" of service binding "PASSPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__retract_USCOREitem(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__retract_USCOREitem*          pass__retract_USCOREitem,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__retract_USCOREitem(
    struct soap *soap,
    // request parameters:
    _pass__retract_USCOREitem*          pass__retract_USCOREitem,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSPortBindingProxy.h):
@code
  class PASSPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSPortBindingService.h):
@code
  class PASSPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	retract_USCOREitem document
//gsoap ns1  service method-encoding:	retract_USCOREitem literal
//gsoap ns1  service method-fault:	retract_USCOREitem pass__pass_USCOREfault_
int __ns1__retract_USCOREitem(
    _pass__retract_USCOREitem*          pass__retract_USCOREitem,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__retract_USCOREtopic                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__retract_USCOREtopic" of service binding "PASSPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__retract_USCOREtopic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__retract_USCOREtopic*         pass__retract_USCOREtopic,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__retract_USCOREtopic(
    struct soap *soap,
    // request parameters:
    _pass__retract_USCOREtopic*         pass__retract_USCOREtopic,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSPortBindingProxy.h):
@code
  class PASSPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSPortBindingService.h):
@code
  class PASSPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	retract_USCOREtopic document
//gsoap ns1  service method-encoding:	retract_USCOREtopic literal
//gsoap ns1  service method-fault:	retract_USCOREtopic pass__pass_USCOREfault_
int __ns1__retract_USCOREtopic(
    _pass__retract_USCOREtopic*         pass__retract_USCOREtopic,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__unsubscribe                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__unsubscribe" of service binding "PASSPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__unsubscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__unsubscribe*                 pass__unsubscribe,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__unsubscribe(
    struct soap *soap,
    // request parameters:
    _pass__unsubscribe*                 pass__unsubscribe,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSPortBindingProxy.h):
@code
  class PASSPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSPortBindingService.h):
@code
  class PASSPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	unsubscribe document
//gsoap ns1  service method-encoding:	unsubscribe literal
//gsoap ns1  service method-fault:	unsubscribe pass__pass_USCOREfault_
int __ns1__unsubscribe(
    _pass__unsubscribe*                 pass__unsubscribe,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__publish                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__publish" of service binding "PASSPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__publish(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__publish*                     pass__publish,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__publish(
    struct soap *soap,
    // request parameters:
    _pass__publish*                     pass__publish,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSPortBindingProxy.h):
@code
  class PASSPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSPortBindingService.h):
@code
  class PASSPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	publish document
//gsoap ns1  service method-encoding:	publish literal
//gsoap ns1  service method-fault:	publish pass__pass_USCOREfault_
int __ns1__publish(
    _pass__publish*                     pass__publish,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__create_USCOREtopic                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__create_USCOREtopic" of service binding "PASSPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__create_USCOREtopic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__create_USCOREtopic*          pass__create_USCOREtopic,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__create_USCOREtopic(
    struct soap *soap,
    // request parameters:
    _pass__create_USCOREtopic*          pass__create_USCOREtopic,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSPortBindingProxy.h):
@code
  class PASSPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSPortBindingService.h):
@code
  class PASSPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	create_USCOREtopic document
//gsoap ns1  service method-encoding:	create_USCOREtopic literal
//gsoap ns1  service method-fault:	create_USCOREtopic pass__pass_USCOREfault_
int __ns1__create_USCOREtopic(
    _pass__create_USCOREtopic*          pass__create_USCOREtopic,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sync                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__sync" of service binding "PASSPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sync(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__sync*                        pass__sync,
    // response parameters:
    _pass__sync_USCOREresponse*         pass__sync_USCOREresponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sync(
    struct soap *soap,
    // request parameters:
    _pass__sync*                        pass__sync,
    // response parameters:
    _pass__sync_USCOREresponse*         pass__sync_USCOREresponse
  );
@endcode

C++ proxy class (defined in soapPASSPortBindingProxy.h):
@code
  class PASSPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSPortBindingService.h):
@code
  class PASSPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	sync document
//gsoap ns1  service method-encoding:	sync literal
//gsoap ns1  service method-fault:	sync pass__pass_USCOREfault_
int __ns1__sync(
    _pass__sync*                        pass__sync,	///< Request parameter
    _pass__sync_USCOREresponse*         pass__sync_USCOREresponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PASSSubscriberPortBinding                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__publish                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__publish" of service binding "PASSSubscriberPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__publish(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__publish*                     pass__publish,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__publish(
    struct soap *soap,
    // request parameters:
    _pass__publish*                     pass__publish,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSSubscriberPortBindingProxy.h):
@code
  class PASSSubscriberPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSSubscriberPortBindingService.h):
@code
  class PASSSubscriberPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	publish document
//gsoap ns2  service method-encoding:	publish literal
//gsoap ns2  service method-fault:	publish pass__pass_USCOREfault_
int __ns2__publish(
    _pass__publish*                     pass__publish,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__retract_USCOREitem                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__retract_USCOREitem" of service binding "PASSSubscriberPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__retract_USCOREitem(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__retract_USCOREitem*          pass__retract_USCOREitem,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__retract_USCOREitem(
    struct soap *soap,
    // request parameters:
    _pass__retract_USCOREitem*          pass__retract_USCOREitem,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSSubscriberPortBindingProxy.h):
@code
  class PASSSubscriberPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSSubscriberPortBindingService.h):
@code
  class PASSSubscriberPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	retract_USCOREitem document
//gsoap ns2  service method-encoding:	retract_USCOREitem literal
//gsoap ns2  service method-fault:	retract_USCOREitem pass__pass_USCOREfault_
int __ns2__retract_USCOREitem(
    _pass__retract_USCOREitem*          pass__retract_USCOREitem,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__retract_USCOREtopic                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__retract_USCOREtopic" of service binding "PASSSubscriberPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__retract_USCOREtopic(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__retract_USCOREtopic*         pass__retract_USCOREtopic,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__retract_USCOREtopic(
    struct soap *soap,
    // request parameters:
    _pass__retract_USCOREtopic*         pass__retract_USCOREtopic,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSSubscriberPortBindingProxy.h):
@code
  class PASSSubscriberPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSSubscriberPortBindingService.h):
@code
  class PASSSubscriberPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	retract_USCOREtopic document
//gsoap ns2  service method-encoding:	retract_USCOREtopic literal
//gsoap ns2  service method-fault:	retract_USCOREtopic pass__pass_USCOREfault_
int __ns2__retract_USCOREtopic(
    _pass__retract_USCOREtopic*         pass__retract_USCOREtopic,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__unsubscribe                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__unsubscribe" of service binding "PASSSubscriberPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "http://peoc3t.us.army.mil/PASS":pass_fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__unsubscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _pass__unsubscribe*                 pass__unsubscribe,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__unsubscribe(
    struct soap *soap,
    // request parameters:
    _pass__unsubscribe*                 pass__unsubscribe,
    // response parameters:
    pass__status*                       pass__status_
  );
@endcode

C++ proxy class (defined in soapPASSSubscriberPortBindingProxy.h):
@code
  class PASSSubscriberPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapPASSSubscriberPortBindingService.h):
@code
  class PASSSubscriberPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	unsubscribe document
//gsoap ns2  service method-encoding:	unsubscribe literal
//gsoap ns2  service method-fault:	unsubscribe pass__pass_USCOREfault_
int __ns2__unsubscribe(
    _pass__unsubscribe*                 pass__unsubscribe,	///< Request parameter
    pass__status*                       pass__status_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section pass Top-level root elements of schema "http://peoc3t.us.army.mil/PASS"

  - <pass:AOI_rectangle> @ref _pass__AOI_USCORErectangle
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__AOI_USCORErectangle(struct soap*, _pass__AOI_USCORErectangle*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__AOI_USCORErectangle(struct soap*, _pass__AOI_USCORErectangle*);
    @endcode

  - <pass:References> @ref _pass__References
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__References(struct soap*, _pass__References*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__References(struct soap*, _pass__References*);
    @endcode

  - <pass:publish> @ref _pass__publish
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__publish(struct soap*, _pass__publish*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__publish(struct soap*, _pass__publish*);
    @endcode

  - <pass:retract_item> @ref _pass__retract_USCOREitem
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__retract_USCOREitem(struct soap*, _pass__retract_USCOREitem*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__retract_USCOREitem(struct soap*, _pass__retract_USCOREitem*);
    @endcode

  - <pass:retract_topic> @ref _pass__retract_USCOREtopic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__retract_USCOREtopic(struct soap*, _pass__retract_USCOREtopic*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__retract_USCOREtopic(struct soap*, _pass__retract_USCOREtopic*);
    @endcode

  - <pass:unsubscribe> @ref _pass__unsubscribe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__unsubscribe(struct soap*, _pass__unsubscribe*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__unsubscribe(struct soap*, _pass__unsubscribe*);
    @endcode

  - <pass:status> (use wsdl2h option -g to auto-generate)

  - <pass:pass_fault> (use wsdl2h option -g to auto-generate)

  - <pass:subscribe> @ref _pass__subscribe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__subscribe(struct soap*, _pass__subscribe*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__subscribe(struct soap*, _pass__subscribe*);
    @endcode

  - <pass:sync> @ref _pass__sync
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__sync(struct soap*, _pass__sync*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__sync(struct soap*, _pass__sync*);
    @endcode

  - <pass:sync_response> @ref _pass__sync_USCOREresponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__sync_USCOREresponse(struct soap*, _pass__sync_USCOREresponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__sync_USCOREresponse(struct soap*, _pass__sync_USCOREresponse*);
    @endcode

  - <pass:create_topic> @ref _pass__create_USCOREtopic
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__pass__create_USCOREtopic(struct soap*, _pass__create_USCOREtopic*);
    // Writer (returns SOAP_OK on success):
    soap_write__pass__create_USCOREtopic(struct soap*, _pass__create_USCOREtopic*);
    @endcode

  - <pass:item> (use wsdl2h option -g to auto-generate)

  - <pass:item_data> (use wsdl2h option -g to auto-generate)

@section xlink Top-level root elements of schema "http://www.w3.org/1999/xlink"

*/

/* End of pass.h */
