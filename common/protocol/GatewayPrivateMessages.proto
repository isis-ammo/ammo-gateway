package ammo.gateway.protocol;

message AssociateDevice {
  required string device = 1;
  required string user = 2;
  required string key = 3;
}

message AssociateCrossGateway {
  required string gateway_id = 1;
  required string key = 2;
  
  message PluginInstanceId {
    required string plugin_name = 1;
    required string instance_id = 2;
  }
  repeated PluginInstanceId connected_plugins = 3;
}

message AssociatePlugin {
  required string plugin_id = 1;
  required string instance_id = 2;
}

message AssociateResult {
  enum Status {
    FAILED = 0;
    SUCCESS = 1;
  }
  enum AssociateType {
    DEVICE = 0;
    PLUGIN = 1;
  }
  required Status result = 1;
  optional string message = 2;
  optional AssociateType type = 3 [default = DEVICE];
}

enum MessageScope {
  GLOBAL = 0;
  LOCAL = 1;
}

/**
* device_delivered : delivered by the plugin to a device (android device)
* plugin_delivered : delivered by the gateway to a plugin
*/
message AcknowledgementThresholds {
  optional bool device_delivered = 1 [default = false];
  optional bool plugin_delivered = 2 [default = false];
}


/**
* When data is to be sent to the Gateway for distribution.
* 
* uid : is a unique identifier of the primary source of the data.
* scope : the scope of this message (used to determine how many gateways
*         to send this message to in a multiple-gateway configuration).
* mime_type : the subcription key (topic)
* encoding : an application specified encoding for the data element
* origin_device : used for routing acknowledgements back to the
*                 originating device. 
* data : the payload, application specific
* thresholds : when any are crossed an acknowlegement is sent
*/
message PushData {
  required string uid = 1;
  optional string mime_type = 2;
  optional string encoding = 6 [default = "json"];
  optional string origin_user = 4;
  optional string origin_device = 7;
  optional bytes data = 3;
  optional MessageScope scope = 5 [default = GLOBAL];
  optional AcknowledgementThresholds thresholds = 8;
}

/**
* Sent when a DataMessage is received, if requested.
*
* uid : this must match the uid of the corresponding DataMessage
* destination_device : this must match the origin_device of the
*                      corresponding DataMessage
* acknowledging_device : this device id of the acknowledging device or plugin. 
* status : indicates the disposition of the message as it crosses the threshold
*     SUCCESS    the threshold was crossed without incident 
*     FAIL       the threshold was reached, but the message failed and will be canceled 
*     UNKNOWN    the request is of an indeterminate disposition
*     REJECTED   the threshold rejected the request
*/
message PushAcknowledgement {
  required string uid = 1;
  optional string destination_device = 2;
  optional string acknowledging_device = 3;
  optional string destination_user = 6;
  optional string acknowledging_user = 7;
  
  optional AcknowledgementThresholds threshold = 5;
  
  enum PushStatus {
    RECEIVED   = 0;
    SUCCESS   = 1;
    FAIL      = 2;
    REJECTED  = 3;
  }
   
  optional PushStatus status = 4;
}


message PullRequest {
  required string request_uid = 1;
  required string plugin_id = 2;
  required string mime_type = 3;
  required string query = 4;
  optional string projection = 5;
  optional uint32 max_results = 6 [default = 0]; //0 means infinite results--  send as many as possible
  optional uint32 start_from_count = 7 [default = 0];
  optional bool live_query = 8 [default = false];
  optional MessageScope scope = 9 [default = LOCAL];
}

message PullResponse {
  required string request_uid = 1;
  required string plugin_id = 2;
  required string mime_type = 3;
  required string uid = 4;
  optional string encoding = 6 [default = "json"];
  required bytes data = 5;
}

message PointToPointMessage {
  required string uid = 1;
  optional string destination_gateway = 2 [default = ""];
  required string destination_plugin_name = 3;
  required string destination_instance_id = 4;
  optional string source_gateway = 5 [default = ""];
  optional string source_plugin_name = 6;
  optional string source_instance_id = 7;
  required string mime_type = 8;
  required string encoding = 9;
  required bytes data = 10;
}

message RegisterPullInterest {
  required string mime_type = 1;
  optional MessageScope scope = 2 [default = LOCAL];
}

message UnregisterPullInterest {
  required string mime_type = 1;
  optional MessageScope scope = 2 [default = LOCAL];
}

message RegisterDataInterest {
  required string mime_type = 1;
  optional MessageScope scope = 5 [default = GLOBAL];
}

message UnregisterDataInterest {
  required string mime_type = 1;
  optional MessageScope scope = 5 [default = GLOBAL];
}

message RemoteGatewayConnectedNotification {
  required string gateway_id = 1;
  
  message PluginInstanceId {
    required string plugin_name = 1;
    required string instance_id = 2;
  }
  repeated PluginInstanceId connected_plugins = 2;
}

message RemoteGatewayDisconnectedNotification {
  required string gateway_id = 1;
}

message PluginConnectedNotification {
  required string plugin_name = 1;
  required string instance_id = 2;
  required bool remote_plugin = 3 [default = false];
  optional string gateway_id = 4 [default = ""];
}

message GatewayWrapper {
  enum MessageType {
    ASSOCIATE_DEVICE = 0;
    ASSOCIATE_RESULT = 1;
    PUSH_DATA = 2;
    REGISTER_DATA_INTEREST = 3;
    UNREGISTER_DATA_INTEREST = 4;
    PULL_REQUEST = 5;
    PULL_RESPONSE = 6;
    REGISTER_PULL_INTEREST = 7;
    UNREGISTER_PULL_INTEREST = 8;
    ASSOCIATE_CROSS_GATEWAY = 9;
    PUSH_ACKNOWLEDGEMENT = 15;
    ASSOCIATE_PLUGIN = 10;
    POINT_TO_POINT_MESSAGE = 11;
    REMOTE_GATEWAY_CONNECTED_NOTIFICATION = 12;
    REMOTE_GATEWAY_DISCONNECTED_NOTIFICATION = 13;
    PLUGIN_CONNECTED_NOTIFICATION = 14;
  }
  
  required MessageType type = 1;
  
  optional sint32 message_priority = 12 [default = 0];
  
  optional AssociateDevice associate_device = 2;
  optional AssociateResult associate_result = 6;
  optional PushData push_data = 3;
  optional RegisterDataInterest register_data_interest = 4;
  optional UnregisterDataInterest unregister_data_interest = 5;
  optional PullRequest pull_request = 7;
  optional PullResponse pull_response = 8;
  optional RegisterPullInterest register_pull_interest = 9;
  optional UnregisterPullInterest unregister_pull_interest = 10;
  optional AssociateCrossGateway associate_cross_gateway = 11;
  optional PushAcknowledgement push_acknowledgement = 18;
  optional AssociatePlugin associate_plugin = 13;
  optional PointToPointMessage point_to_point_message = 14;
  optional RemoteGatewayConnectedNotification remote_gateway_connected_notification = 15;
  optional RemoteGatewayDisconnectedNotification remote_gateway_disconnected_notification = 16;
  optional PluginConnectedNotification plugin_connected_notification = 17;
}
