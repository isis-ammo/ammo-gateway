package ammo.gateway.protocol;

/**
* Sent on initial connection to gateway to authenticate user.
* 
*/
message AuthenticationMessage {
  enum Type {
    CLIENT_NONCE = 0;
    SERVER_NONCE = 1;
    CLIENT_KEYXCHANGE = 2;
    CLIENT_PHNAUTH = 3;
    CLIENT_FINISH = 4;
    SERVER_FINISH = 5;
    STATUS = 6;
  }
  enum Status {
    FAILED = 0;
    SUCCESS = 1;
  }
  required Type type = 1;
  optional bytes message = 2;
  optional string device_id = 3;
  optional string user_id = 4;
  optional bytes user_key = 5;
  optional Status result = 6;
  
  optional bool authentication_enabled = 7;
}

message AssociateCrossGateway {
  required string gateway_id = 1;
  required string key = 2;
}

message AssociateResult {
  enum Status {
    FAILED = 0;
    SUCCESS = 1;
  }
  required Status result = 1;
  optional string message = 2;
}

enum MessageScope {
  GLOBAL = 0;
  LOCAL = 1;
}

message PushData {
  required string uri = 1;
  optional string mime_type = 2;
  optional bytes data = 3;
  optional string origin_user = 4;
  optional MessageScope scope = 5 [default = GLOBAL];
}

message PullRequest {
  required string request_uid = 1;
  required string plugin_id = 2;
  required string mime_type = 3;
  required string query = 4;
  optional string projection = 5;
  optional uint32 max_results = 6 [default = 0]; //0 means infinite results--  send as many as possible
  optional uint32 start_from_count = 7 [default = 0];
  optional bool live_query = 8 [default = false];
}

message PullResponse {
  required string request_uid = 1;
  required string plugin_id = 2;
  required string mime_type = 3;
  required string uri = 4;
  required bytes data = 5;
}

message RegisterPullInterest {
  required string mime_type = 1;
}

message UnregisterPullInterest {
  required string mime_type = 1;
}

message RegisterDataInterest {
  required string mime_type = 1;
  optional MessageScope scope = 5 [default = GLOBAL];
}

message UnregisterDataInterest {
  required string mime_type = 1;
  optional MessageScope scope = 5 [default = GLOBAL];
}

message GatewayWrapper {
  enum MessageType {
    ASSOCIATE_RESULT = 1;
    PUSH_DATA = 2;
    REGISTER_DATA_INTEREST = 3;
    UNREGISTER_DATA_INTEREST = 4;
    PULL_REQUEST = 5;
    PULL_RESPONSE = 6;
    REGISTER_PULL_INTEREST = 7;
    UNREGISTER_PULL_INTEREST = 8;
    ASSOCIATE_CROSS_GATEWAY = 9;
    AUTHENTICATION_MESSAGE = 10;
  }
  
  required MessageType type = 1;
  
  optional AssociateResult associate_result = 6;
  optional PushData push_data = 3;
  optional RegisterDataInterest register_data_interest = 4;
  optional UnregisterDataInterest unregister_data_interest = 5;
  optional PullRequest pull_request = 7;
  optional PullResponse pull_response = 8;
  optional RegisterPullInterest register_pull_interest = 9;
  optional UnregisterPullInterest unregister_pull_interest = 10;
  optional AssociateCrossGateway associate_cross_gateway = 11;
  optional AuthenticationMessage authentication_message = 12;
}
