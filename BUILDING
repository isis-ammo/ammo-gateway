Build prerequisites (tested version):
  * Google Protocol Buffers (2.3.0)
  * ACE (5.8.3)
  * Perl (Linux: 5.10.1, Windows 5.12.1)
  * Gsoap (2.7.17)
  * Boost C++ Libraries (1.42)
  * libcurl (OpenSSL) (7.2.1)
   
Building on Linux:
==================
  1) Install build dependencies using your distribution's package manager.  See
     manifest.dpkg for a list of required packages.
     
     On Ubuntu, these can be installed in one step with:
        sudo apt-get install $(cat manifest.dpkg)
     
  2) Download, build, and install Google Protocol Buffers
     ** Note:  on Ubuntu 10.04, Protocol Buffers 2.3.0 may conflict with an
        earlier version of Protocol Buffers already on the system-- you may
        want to install it to a different prefix with
        
        ./configure --prefix=$HOME/protobuf230/
        
        or similar to avoid causing system-wide conflicts.
        
     ** Ubuntu 10.10 ships with Protocol Buffers 2.3.0, so you should not
        build and install it from source (it was installed in Step 1).
        
  3) Download, build, and install gsoap, version 2.7.17, available at:
        http://sourceforge.net/projects/gsoap2/files/gSOAP/gsoap_2.7.17.zip/download
        
        Note that this is an older version of gsoap--  but it's newer than the
        version available in Ubuntu 10.04 or 10.10's repositories.  Build using
        the standard Linux:
          ./configure
          make
          sudo make install
        
  4) Download and extract ACE+TAO+CIAO to a location of your choice.
        http://download.dre.vanderbilt.edu/
        e.g.
        http://download.dre.vanderbilt.edu/previous_versions/ACE+TAO+CIAO-5.8.3.tar.bz2
  
  5) Set environment variables (in .bashrc or similar):
        export ACE_ROOT=(ACE_wrappers directory)
        export MPC_ROOT=$ACE_ROOT/MPC
        export TAO_ROOT=$ACE_ROOT/TAO
        export CIAO_ROOT=$TAO_ROOT/CIAO
        export PROTOBUF_ROOT=(Protobuf installation directory)
        export GATEWAY_ROOT=(This Gateway directory)
        export PATH=$PROTOBUF_ROOT/bin:$ACE_ROOT/bin:$PATH
        export LD_LIBRARY_PATH=$GATEWAY_ROOT/build/lib:$PROTOBUF_ROOT/lib:$ACE_ROOT/lib:$LD_LIBRARY_PATH
  
  6) Create a file called "config.h" in $ACE_ROOT/ace/ containing:
        #define ACE_HAS_STANDARD_CPP_LIBRARY 1
        #include "ace/config-linux.h"
        
  7) Create a symbolic link called platform_macros.GNU in $ACE_ROOT/include/makeinclude
     pointing to the file platform_linux.GNU
     i.e. ln -s platform_linux.GNU platform_macros.GNU
     (If platform_macros.GNU already exists you will need to remove it.)
        
  8) Build ACE (you may also build TAO and CIAO at this point, but they are not
     currently required for the gateway):
        cd $ACE_ROOT
        make
        
  9) Generate Gateway workspace:
        mwc.pl --type make Gateway.mwc
        
 10) Build the gateway:
        make
        
  Linux build notes:
   * Compiled executables can be found in $GATEWAY_ROOT/build/bin/; note that
     executables should also be run from this directory so that they can find
     their configuration files.
   * Generated object files may be cleaned with 'make clean'; all generated
     files (including executables and C++ files generated by the Protocol
     Buffers compiler) may be cleaned with 'make realclean'.
     
Building on Mac OS X (10.6):
===========================
** WARNING:  Homebrew (the package manager used for this tutorial) can conflict
   with MacPorts and Fink.  If you have either installed, you may want to remove
   it before proceeding.  If you don't know what these are, you don't have them
   installed, and you may proceed.
   
   Prerequisite:  a current version of XCode.  The most recent version freely
   available from http://developer.apple.com/ is recommended.

   Most OSX build dependencies are provided with OSX (if XCode is installed).
   We use Homebrew (http://mxcl.github.com/homebrew/) to provide the missing 
   dependencies.
   
  1) Download and install Homebrew:
        ruby -e "$(curl -fsSLk https://gist.github.com/raw/323731/install_homebrew.rb)"
        
  2) Install Google Protocol Buffers and Boost (note that Boost can take a long
     time to build and install):
        brew install protobuf
        brew install boost
        
  3) Download our Homebrew formulas and install GSOAP:
        brew update
        cd /usr/local/Library/Formula
        git pull https://github.com/jonathonw/homebrew.git
        brew install gsoap
        
  4) Download and extract ACE+TAO+CIAO to a location of your choice.
        http://download.dre.vanderbilt.edu/
        e.g.
        http://download.dre.vanderbilt.edu/previous_versions/ACE+TAO+CIAO-5.8.3.tar.bz2
  
  5) Set environment variables (in .bashrc or similar):
        export ACE_ROOT=(ACE_wrappers directory)
        export MPC_ROOT=$ACE_ROOT/MPC
        export TAO_ROOT=$ACE_ROOT/TAO
        export CIAO_ROOT=$TAO_ROOT/CIAO
        export PROTOBUF_ROOT=/usr/local
        export GATEWAY_ROOT=(This Gateway directory)
        export PATH=$ACE_ROOT/bin:$PATH
        export DYLD_LIBRARY_PATH=$GATEWAY_ROOT/build/lib:$ACE_ROOT/lib:$DYLD_LIBRARY_PATH
  
  6) Create a file called "config.h" in $ACE_ROOT/ace/ containing:
        #define ACE_HAS_STANDARD_CPP_LIBRARY 1
        #include "ace/config-macosx-snowleopard.h"
        
  7) Create a symbolic link called platform_macros.GNU in $ACE_ROOT/include/makeinclude
     pointing to the file platform_snowleopard.GNU
     i.e. ln -s platform_macosx_snowleopard.GNU platform_macros.GNU
     (If platform_macros.GNU already exists you will need to remove it.)
        
  8) Build ACE (you may also build TAO and CIAO at this point, but they are not
     currently required for the gateway):
        cd $ACE_ROOT
        make
        
  9) Generate Gateway workspace:
        mwc.pl --type make Gateway.mwc
        
 10) Build the gateway:
        make
        
  OSX build notes:
   * Compiled executables can be found in $GATEWAY_ROOT/build/bin/; note that
     executables should also be run from this directory so that they can find
     their configuration files.
   * Generated object files may be cleaned with 'make clean'; all generated
     files (including executables and C++ files generated by the Protocol
     Buffers compiler) may be cleaned with 'make realclean'.
